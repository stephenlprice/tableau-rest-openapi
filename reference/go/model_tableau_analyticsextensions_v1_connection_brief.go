/*
API Reference for Tableau Resource Versioned RESTful Endpoints

>The following OpenAPI documentation describes the details of the new Tableau RESTful APIs. A growing number of these are  being released alongside more than 150 [classic REST endpoints](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_ref.htm)  that are currently in wide usage in the Tableau community.    >There are some differences users of the classic endpoints will recognize when viewing these new endpoints. Request bodies for these new REST endpoints must  be formatted using JSON. Endpoint URIs don't contain an API version number. For more information, see  [REST API and Resource Versions](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm).   ![tableau platform](https://github.com/stephenlprice/tableau-rest-openapi/blob/main/assets/images/tableau-platform.png?raw=true)

API version: 2021.2
Contact: stellopricint@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TableauAnalyticsextensionsV1ConnectionBrief struct for TableauAnalyticsextensionsV1ConnectionBrief
type TableauAnalyticsextensionsV1ConnectionBrief struct {
	// Required. The title of the connection.
	ConnectionName *string `json:"connection_name,omitempty"`
	// Required. The kind of service responding to analytics extension requests. The value can be: TABPY, for a [Tableau TabPy](https://github.com/tableau/TabPy) server; GENERIC_API for your custom service that complies with the [Analytics Extensions API spec](https://tableau.github.io/analytics-extensions-api/docs/ae_intro.html); or RSERVE, for an [Rserve](https://www.tableau.com/solutions/r) service; or EINSTEIN_DISCOVERY for your instance of [Einstein Discovery](https://help.tableau.com/current/server-linux/en-us/config_r_tabpy.htm).
	ConnectionType *string `json:"connection_type,omitempty"`
}

// NewTableauAnalyticsextensionsV1ConnectionBrief instantiates a new TableauAnalyticsextensionsV1ConnectionBrief object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableauAnalyticsextensionsV1ConnectionBrief() *TableauAnalyticsextensionsV1ConnectionBrief {
	this := TableauAnalyticsextensionsV1ConnectionBrief{}
	return &this
}

// NewTableauAnalyticsextensionsV1ConnectionBriefWithDefaults instantiates a new TableauAnalyticsextensionsV1ConnectionBrief object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableauAnalyticsextensionsV1ConnectionBriefWithDefaults() *TableauAnalyticsextensionsV1ConnectionBrief {
	this := TableauAnalyticsextensionsV1ConnectionBrief{}
	return &this
}

// GetConnectionName returns the ConnectionName field value if set, zero value otherwise.
func (o *TableauAnalyticsextensionsV1ConnectionBrief) GetConnectionName() string {
	if o == nil || o.ConnectionName == nil {
		var ret string
		return ret
	}
	return *o.ConnectionName
}

// GetConnectionNameOk returns a tuple with the ConnectionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableauAnalyticsextensionsV1ConnectionBrief) GetConnectionNameOk() (*string, bool) {
	if o == nil || o.ConnectionName == nil {
		return nil, false
	}
	return o.ConnectionName, true
}

// HasConnectionName returns a boolean if a field has been set.
func (o *TableauAnalyticsextensionsV1ConnectionBrief) HasConnectionName() bool {
	if o != nil && o.ConnectionName != nil {
		return true
	}

	return false
}

// SetConnectionName gets a reference to the given string and assigns it to the ConnectionName field.
func (o *TableauAnalyticsextensionsV1ConnectionBrief) SetConnectionName(v string) {
	o.ConnectionName = &v
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise.
func (o *TableauAnalyticsextensionsV1ConnectionBrief) GetConnectionType() string {
	if o == nil || o.ConnectionType == nil {
		var ret string
		return ret
	}
	return *o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableauAnalyticsextensionsV1ConnectionBrief) GetConnectionTypeOk() (*string, bool) {
	if o == nil || o.ConnectionType == nil {
		return nil, false
	}
	return o.ConnectionType, true
}

// HasConnectionType returns a boolean if a field has been set.
func (o *TableauAnalyticsextensionsV1ConnectionBrief) HasConnectionType() bool {
	if o != nil && o.ConnectionType != nil {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given string and assigns it to the ConnectionType field.
func (o *TableauAnalyticsextensionsV1ConnectionBrief) SetConnectionType(v string) {
	o.ConnectionType = &v
}

func (o TableauAnalyticsextensionsV1ConnectionBrief) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConnectionName != nil {
		toSerialize["connection_name"] = o.ConnectionName
	}
	if o.ConnectionType != nil {
		toSerialize["connection_type"] = o.ConnectionType
	}
	return json.Marshal(toSerialize)
}

type NullableTableauAnalyticsextensionsV1ConnectionBrief struct {
	value *TableauAnalyticsextensionsV1ConnectionBrief
	isSet bool
}

func (v NullableTableauAnalyticsextensionsV1ConnectionBrief) Get() *TableauAnalyticsextensionsV1ConnectionBrief {
	return v.value
}

func (v *NullableTableauAnalyticsextensionsV1ConnectionBrief) Set(val *TableauAnalyticsextensionsV1ConnectionBrief) {
	v.value = val
	v.isSet = true
}

func (v NullableTableauAnalyticsextensionsV1ConnectionBrief) IsSet() bool {
	return v.isSet
}

func (v *NullableTableauAnalyticsextensionsV1ConnectionBrief) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableauAnalyticsextensionsV1ConnectionBrief(val *TableauAnalyticsextensionsV1ConnectionBrief) *NullableTableauAnalyticsextensionsV1ConnectionBrief {
	return &NullableTableauAnalyticsextensionsV1ConnectionBrief{value: val, isSet: true}
}

func (v NullableTableauAnalyticsextensionsV1ConnectionBrief) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableauAnalyticsextensionsV1ConnectionBrief) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



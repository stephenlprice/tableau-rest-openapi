/*
API Reference for Tableau Resource Versioned RESTful Endpoints

>The following OpenAPI documentation describes the details of the new Tableau RESTful APIs. A growing number of these are  being released alongside more than 150 [classic REST endpoints](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_ref.htm)  that are currently in wide usage in the Tableau community.    >There are some differences users of the classic endpoints will recognize when viewing these new endpoints. Request bodies for these new REST endpoints must  be formatted using JSON. Endpoint URIs don't contain an API version number. For more information, see  [REST API and Resource Versions](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm).   ![tableau platform](https://github.com/stephenlprice/tableau-rest-openapi/blob/main/assets/images/tableau-platform.png?raw=true)

API version: 2021.2
Contact: stellopricint@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// DashboardExtensionsSettingsMethodsApiService DashboardExtensionsSettingsMethodsApi service
type DashboardExtensionsSettingsMethodsApiService service

type ApiCreateDashboardExtensionsBlockListItemRequest struct {
	ctx context.Context
	ApiService *DashboardExtensionsSettingsMethodsApiService
	xTableauAuth *string
	tableauExtensionsDashboardV1BlockListItem *TableauExtensionsDashboardV1BlockListItem
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiCreateDashboardExtensionsBlockListItemRequest) XTableauAuth(xTableauAuth string) ApiCreateDashboardExtensionsBlockListItemRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiCreateDashboardExtensionsBlockListItemRequest) TableauExtensionsDashboardV1BlockListItem(tableauExtensionsDashboardV1BlockListItem TableauExtensionsDashboardV1BlockListItem) ApiCreateDashboardExtensionsBlockListItemRequest {
	r.tableauExtensionsDashboardV1BlockListItem = &tableauExtensionsDashboardV1BlockListItem
	return r
}

func (r ApiCreateDashboardExtensionsBlockListItemRequest) Execute() (*TableauExtensionsDashboardV1BlockListItem, *http.Response, error) {
	return r.ApiService.CreateDashboardExtensionsBlockListItemExecute(r)
}

/*
CreateDashboardExtensionsBlockListItem Block dashboard extension on server

Adds a dashboard extension to the block list of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDashboardExtensionsBlockListItemRequest
*/
func (a *DashboardExtensionsSettingsMethodsApiService) CreateDashboardExtensionsBlockListItem(ctx context.Context) ApiCreateDashboardExtensionsBlockListItemRequest {
	return ApiCreateDashboardExtensionsBlockListItemRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TableauExtensionsDashboardV1BlockListItem
func (a *DashboardExtensionsSettingsMethodsApiService) CreateDashboardExtensionsBlockListItemExecute(r ApiCreateDashboardExtensionsBlockListItemRequest) (*TableauExtensionsDashboardV1BlockListItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauExtensionsDashboardV1BlockListItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardExtensionsSettingsMethodsApiService.CreateDashboardExtensionsBlockListItem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/server/extensions/dashboard/blockListItems"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.tableau.extensions.dashboard.v1.BlockListItem+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.extensions.dashboard.v1.BlockListItem+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	// body params
	localVarPostBody = r.tableauExtensionsDashboardV1BlockListItem
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateDashboardExtensionsSafeListItemRequest struct {
	ctx context.Context
	ApiService *DashboardExtensionsSettingsMethodsApiService
	xTableauAuth *string
	tableauExtensionsDashboardV1SafeListItem *TableauExtensionsDashboardV1SafeListItem
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiCreateDashboardExtensionsSafeListItemRequest) XTableauAuth(xTableauAuth string) ApiCreateDashboardExtensionsSafeListItemRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiCreateDashboardExtensionsSafeListItemRequest) TableauExtensionsDashboardV1SafeListItem(tableauExtensionsDashboardV1SafeListItem TableauExtensionsDashboardV1SafeListItem) ApiCreateDashboardExtensionsSafeListItemRequest {
	r.tableauExtensionsDashboardV1SafeListItem = &tableauExtensionsDashboardV1SafeListItem
	return r
}

func (r ApiCreateDashboardExtensionsSafeListItemRequest) Execute() (*TableauExtensionsDashboardV1SafeListItem, *http.Response, error) {
	return r.ApiService.CreateDashboardExtensionsSafeListItemExecute(r)
}

/*
CreateDashboardExtensionsSafeListItem Allow dashboard extension on site

Adds a dashboard extension to the safe list the site you are signed into. Permissions - This method can be called by site and server administrators. Availability - Not available for Tableau Online.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDashboardExtensionsSafeListItemRequest
*/
func (a *DashboardExtensionsSettingsMethodsApiService) CreateDashboardExtensionsSafeListItem(ctx context.Context) ApiCreateDashboardExtensionsSafeListItemRequest {
	return ApiCreateDashboardExtensionsSafeListItemRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TableauExtensionsDashboardV1SafeListItem
func (a *DashboardExtensionsSettingsMethodsApiService) CreateDashboardExtensionsSafeListItemExecute(r ApiCreateDashboardExtensionsSafeListItemRequest) (*TableauExtensionsDashboardV1SafeListItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauExtensionsDashboardV1SafeListItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardExtensionsSettingsMethodsApiService.CreateDashboardExtensionsSafeListItem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/site/extensions/dashboard/safeListItems"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.tableau.extensions.dashboard.v1.SafeListItem+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.extensions.dashboard.v1.SafeListItem+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	// body params
	localVarPostBody = r.tableauExtensionsDashboardV1SafeListItem
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDashboardExtensionsBlockListItemRequest struct {
	ctx context.Context
	ApiService *DashboardExtensionsSettingsMethodsApiService
	blockListItemLuid string
	xTableauAuth *string
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiDeleteDashboardExtensionsBlockListItemRequest) XTableauAuth(xTableauAuth string) ApiDeleteDashboardExtensionsBlockListItemRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiDeleteDashboardExtensionsBlockListItemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDashboardExtensionsBlockListItemExecute(r)
}

/*
DeleteDashboardExtensionsBlockListItem Unblock dashboard extension on server

Deletes a specific extension from the block list of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param blockListItemLuid
 @return ApiDeleteDashboardExtensionsBlockListItemRequest
*/
func (a *DashboardExtensionsSettingsMethodsApiService) DeleteDashboardExtensionsBlockListItem(ctx context.Context, blockListItemLuid string) ApiDeleteDashboardExtensionsBlockListItemRequest {
	return ApiDeleteDashboardExtensionsBlockListItemRequest{
		ApiService: a,
		ctx: ctx,
		blockListItemLuid: blockListItemLuid,
	}
}

// Execute executes the request
func (a *DashboardExtensionsSettingsMethodsApiService) DeleteDashboardExtensionsBlockListItemExecute(r ApiDeleteDashboardExtensionsBlockListItemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardExtensionsSettingsMethodsApiService.DeleteDashboardExtensionsBlockListItem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/server/extensions/dashboard/blockListItems/{block_list_item_luid}"
	localVarPath = strings.Replace(localVarPath, "{"+"block_list_item_luid"+"}", url.PathEscape(parameterToString(r.blockListItemLuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteDashboardExtensionsSafeListItemRequest struct {
	ctx context.Context
	ApiService *DashboardExtensionsSettingsMethodsApiService
	safeListItemLuid string
	xTableauAuth *string
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiDeleteDashboardExtensionsSafeListItemRequest) XTableauAuth(xTableauAuth string) ApiDeleteDashboardExtensionsSafeListItemRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiDeleteDashboardExtensionsSafeListItemRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDashboardExtensionsSafeListItemExecute(r)
}

/*
DeleteDashboardExtensionsSafeListItem Disallow dashboard extension on site

Deletes a specific dashboard extension from the safe list of the site you are signed into. Permissions - This method can be called by site and server administrators.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param safeListItemLuid
 @return ApiDeleteDashboardExtensionsSafeListItemRequest
*/
func (a *DashboardExtensionsSettingsMethodsApiService) DeleteDashboardExtensionsSafeListItem(ctx context.Context, safeListItemLuid string) ApiDeleteDashboardExtensionsSafeListItemRequest {
	return ApiDeleteDashboardExtensionsSafeListItemRequest{
		ApiService: a,
		ctx: ctx,
		safeListItemLuid: safeListItemLuid,
	}
}

// Execute executes the request
func (a *DashboardExtensionsSettingsMethodsApiService) DeleteDashboardExtensionsSafeListItemExecute(r ApiDeleteDashboardExtensionsSafeListItemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardExtensionsSettingsMethodsApiService.DeleteDashboardExtensionsSafeListItem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/site/extensions/dashboard/safeListItems/{safe_list_item_luid}"
	localVarPath = strings.Replace(localVarPath, "{"+"safe_list_item_luid"+"}", url.PathEscape(parameterToString(r.safeListItemLuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDashboardExtensionsBlockListItemRequest struct {
	ctx context.Context
	ApiService *DashboardExtensionsSettingsMethodsApiService
	blockListItemLuid string
	xTableauAuth *string
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiGetDashboardExtensionsBlockListItemRequest) XTableauAuth(xTableauAuth string) ApiGetDashboardExtensionsBlockListItemRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiGetDashboardExtensionsBlockListItemRequest) Execute() (*TableauExtensionsDashboardV1BlockListItem, *http.Response, error) {
	return r.ApiService.GetDashboardExtensionsBlockListItemExecute(r)
}

/*
GetDashboardExtensionsBlockListItem Get blocked dashboard extension on server

Gets the details of a specific dashboard extension on the blocked list of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param blockListItemLuid
 @return ApiGetDashboardExtensionsBlockListItemRequest
*/
func (a *DashboardExtensionsSettingsMethodsApiService) GetDashboardExtensionsBlockListItem(ctx context.Context, blockListItemLuid string) ApiGetDashboardExtensionsBlockListItemRequest {
	return ApiGetDashboardExtensionsBlockListItemRequest{
		ApiService: a,
		ctx: ctx,
		blockListItemLuid: blockListItemLuid,
	}
}

// Execute executes the request
//  @return TableauExtensionsDashboardV1BlockListItem
func (a *DashboardExtensionsSettingsMethodsApiService) GetDashboardExtensionsBlockListItemExecute(r ApiGetDashboardExtensionsBlockListItemRequest) (*TableauExtensionsDashboardV1BlockListItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauExtensionsDashboardV1BlockListItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardExtensionsSettingsMethodsApiService.GetDashboardExtensionsBlockListItem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/server/extensions/dashboard/blockListItems/{block_list_item_luid}"
	localVarPath = strings.Replace(localVarPath, "{"+"block_list_item_luid"+"}", url.PathEscape(parameterToString(r.blockListItemLuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.extensions.dashboard.v1.BlockListItem+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDashboardExtensionsBlockListItemsRequest struct {
	ctx context.Context
	ApiService *DashboardExtensionsSettingsMethodsApiService
	xTableauAuth *string
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiGetDashboardExtensionsBlockListItemsRequest) XTableauAuth(xTableauAuth string) ApiGetDashboardExtensionsBlockListItemsRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiGetDashboardExtensionsBlockListItemsRequest) Execute() (*TableauExtensionsDashboardV1BlockListItems, *http.Response, error) {
	return r.ApiService.GetDashboardExtensionsBlockListItemsExecute(r)
}

/*
GetDashboardExtensionsBlockListItems List blocked dashboard extensions on server

Lists the dashboard extensions on the blocked list of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDashboardExtensionsBlockListItemsRequest
*/
func (a *DashboardExtensionsSettingsMethodsApiService) GetDashboardExtensionsBlockListItems(ctx context.Context) ApiGetDashboardExtensionsBlockListItemsRequest {
	return ApiGetDashboardExtensionsBlockListItemsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TableauExtensionsDashboardV1BlockListItems
func (a *DashboardExtensionsSettingsMethodsApiService) GetDashboardExtensionsBlockListItemsExecute(r ApiGetDashboardExtensionsBlockListItemsRequest) (*TableauExtensionsDashboardV1BlockListItems, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauExtensionsDashboardV1BlockListItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardExtensionsSettingsMethodsApiService.GetDashboardExtensionsBlockListItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/server/extensions/dashboard/blockListItems"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.extensions.dashboard.v1.BlockListItems+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDashboardExtensionsSafeListItemRequest struct {
	ctx context.Context
	ApiService *DashboardExtensionsSettingsMethodsApiService
	safeListItemLuid string
	xTableauAuth *string
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiGetDashboardExtensionsSafeListItemRequest) XTableauAuth(xTableauAuth string) ApiGetDashboardExtensionsSafeListItemRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiGetDashboardExtensionsSafeListItemRequest) Execute() (*TableauExtensionsDashboardV1SafeListItem, *http.Response, error) {
	return r.ApiService.GetDashboardExtensionsSafeListItemExecute(r)
}

/*
GetDashboardExtensionsSafeListItem Get allowed dashboard extension on site

Gets the details of a specific dashboard extension on the safe list of the site you are signed into. Permissions - This method can be called by site and server administrators.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param safeListItemLuid
 @return ApiGetDashboardExtensionsSafeListItemRequest
*/
func (a *DashboardExtensionsSettingsMethodsApiService) GetDashboardExtensionsSafeListItem(ctx context.Context, safeListItemLuid string) ApiGetDashboardExtensionsSafeListItemRequest {
	return ApiGetDashboardExtensionsSafeListItemRequest{
		ApiService: a,
		ctx: ctx,
		safeListItemLuid: safeListItemLuid,
	}
}

// Execute executes the request
//  @return TableauExtensionsDashboardV1SafeListItem
func (a *DashboardExtensionsSettingsMethodsApiService) GetDashboardExtensionsSafeListItemExecute(r ApiGetDashboardExtensionsSafeListItemRequest) (*TableauExtensionsDashboardV1SafeListItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauExtensionsDashboardV1SafeListItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardExtensionsSettingsMethodsApiService.GetDashboardExtensionsSafeListItem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/site/extensions/dashboard/safeListItems/{safe_list_item_luid}"
	localVarPath = strings.Replace(localVarPath, "{"+"safe_list_item_luid"+"}", url.PathEscape(parameterToString(r.safeListItemLuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.extensions.dashboard.v1.SafeListItem+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDashboardExtensionsSafeListItemsRequest struct {
	ctx context.Context
	ApiService *DashboardExtensionsSettingsMethodsApiService
	xTableauAuth *string
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiGetDashboardExtensionsSafeListItemsRequest) XTableauAuth(xTableauAuth string) ApiGetDashboardExtensionsSafeListItemsRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiGetDashboardExtensionsSafeListItemsRequest) Execute() (*TableauExtensionsDashboardV1SafeListItems, *http.Response, error) {
	return r.ApiService.GetDashboardExtensionsSafeListItemsExecute(r)
}

/*
GetDashboardExtensionsSafeListItems Lists allowed dashboard extensions on site

Lists the dashboard extensions on the safe list of the site you are signed into. Permissions - This method can be called by site and server administrators.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDashboardExtensionsSafeListItemsRequest
*/
func (a *DashboardExtensionsSettingsMethodsApiService) GetDashboardExtensionsSafeListItems(ctx context.Context) ApiGetDashboardExtensionsSafeListItemsRequest {
	return ApiGetDashboardExtensionsSafeListItemsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TableauExtensionsDashboardV1SafeListItems
func (a *DashboardExtensionsSettingsMethodsApiService) GetDashboardExtensionsSafeListItemsExecute(r ApiGetDashboardExtensionsSafeListItemsRequest) (*TableauExtensionsDashboardV1SafeListItems, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauExtensionsDashboardV1SafeListItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardExtensionsSettingsMethodsApiService.GetDashboardExtensionsSafeListItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/site/extensions/dashboard/safeListItems"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.extensions.dashboard.v1.SafeListItems+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDashboardExtensionsServerSettingsRequest struct {
	ctx context.Context
	ApiService *DashboardExtensionsSettingsMethodsApiService
	xTableauAuth *string
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiGetDashboardExtensionsServerSettingsRequest) XTableauAuth(xTableauAuth string) ApiGetDashboardExtensionsServerSettingsRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiGetDashboardExtensionsServerSettingsRequest) Execute() (*TableauExtensionsDashboardV1ServerSettings, *http.Response, error) {
	return r.ApiService.GetDashboardExtensionsServerSettingsExecute(r)
}

/*
GetDashboardExtensionsServerSettings List dashboard extension settings of server

Lists the dashboard extension settings of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDashboardExtensionsServerSettingsRequest
*/
func (a *DashboardExtensionsSettingsMethodsApiService) GetDashboardExtensionsServerSettings(ctx context.Context) ApiGetDashboardExtensionsServerSettingsRequest {
	return ApiGetDashboardExtensionsServerSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TableauExtensionsDashboardV1ServerSettings
func (a *DashboardExtensionsSettingsMethodsApiService) GetDashboardExtensionsServerSettingsExecute(r ApiGetDashboardExtensionsServerSettingsRequest) (*TableauExtensionsDashboardV1ServerSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauExtensionsDashboardV1ServerSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardExtensionsSettingsMethodsApiService.GetDashboardExtensionsServerSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/server/extensions/dashboard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.extensions.dashboard.v1.ServerSettings+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDashboardExtensionsSiteSettingsRequest struct {
	ctx context.Context
	ApiService *DashboardExtensionsSettingsMethodsApiService
	xTableauAuth *string
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiGetDashboardExtensionsSiteSettingsRequest) XTableauAuth(xTableauAuth string) ApiGetDashboardExtensionsSiteSettingsRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiGetDashboardExtensionsSiteSettingsRequest) Execute() (*TableauExtensionsDashboardV1SiteSettings, *http.Response, error) {
	return r.ApiService.GetDashboardExtensionsSiteSettingsExecute(r)
}

/*
GetDashboardExtensionsSiteSettings List dashboard extension settings of site

Lists the dashboard extension settings of the site you are signed into. Permissions - This method can be called by site and server administrators.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDashboardExtensionsSiteSettingsRequest
*/
func (a *DashboardExtensionsSettingsMethodsApiService) GetDashboardExtensionsSiteSettings(ctx context.Context) ApiGetDashboardExtensionsSiteSettingsRequest {
	return ApiGetDashboardExtensionsSiteSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TableauExtensionsDashboardV1SiteSettings
func (a *DashboardExtensionsSettingsMethodsApiService) GetDashboardExtensionsSiteSettingsExecute(r ApiGetDashboardExtensionsSiteSettingsRequest) (*TableauExtensionsDashboardV1SiteSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauExtensionsDashboardV1SiteSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardExtensionsSettingsMethodsApiService.GetDashboardExtensionsSiteSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/site/extensions/dashboard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.extensions.dashboard.v1.SiteSettings+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDashboardExtensionsSafeListItemRequest struct {
	ctx context.Context
	ApiService *DashboardExtensionsSettingsMethodsApiService
	safeListItemLuid interface{}
	xTableauAuth *string
	tableauExtensionsDashboardV1SafeListItem *TableauExtensionsDashboardV1SafeListItem
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiUpdateDashboardExtensionsSafeListItemRequest) XTableauAuth(xTableauAuth string) ApiUpdateDashboardExtensionsSafeListItemRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiUpdateDashboardExtensionsSafeListItemRequest) TableauExtensionsDashboardV1SafeListItem(tableauExtensionsDashboardV1SafeListItem TableauExtensionsDashboardV1SafeListItem) ApiUpdateDashboardExtensionsSafeListItemRequest {
	r.tableauExtensionsDashboardV1SafeListItem = &tableauExtensionsDashboardV1SafeListItem
	return r
}

func (r ApiUpdateDashboardExtensionsSafeListItemRequest) Execute() (*TableauExtensionsDashboardV1SafeListItem, *http.Response, error) {
	return r.ApiService.UpdateDashboardExtensionsSafeListItemExecute(r)
}

/*
UpdateDashboardExtensionsSafeListItem Update settings for allowed dashboard extension on site

Updates the settings of a specific dashboard extension in the safe list of the site you are signed into. Permissions - This method can be called by site and server administrators.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param safeListItemLuid
 @return ApiUpdateDashboardExtensionsSafeListItemRequest
*/
func (a *DashboardExtensionsSettingsMethodsApiService) UpdateDashboardExtensionsSafeListItem(ctx context.Context, safeListItemLuid interface{}) ApiUpdateDashboardExtensionsSafeListItemRequest {
	return ApiUpdateDashboardExtensionsSafeListItemRequest{
		ApiService: a,
		ctx: ctx,
		safeListItemLuid: safeListItemLuid,
	}
}

// Execute executes the request
//  @return TableauExtensionsDashboardV1SafeListItem
func (a *DashboardExtensionsSettingsMethodsApiService) UpdateDashboardExtensionsSafeListItemExecute(r ApiUpdateDashboardExtensionsSafeListItemRequest) (*TableauExtensionsDashboardV1SafeListItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauExtensionsDashboardV1SafeListItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardExtensionsSettingsMethodsApiService.UpdateDashboardExtensionsSafeListItem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/site/extensions/dashboard/safeListItems/{safe_list_item_luid}"
	localVarPath = strings.Replace(localVarPath, "{"+"safe_list_item_luid"+"}", url.PathEscape(parameterToString(r.safeListItemLuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.tableau.extensions.dashboard.v1.SafeListItem+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.extensions.dashboard.v1.SafeListItem+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	// body params
	localVarPostBody = r.tableauExtensionsDashboardV1SafeListItem
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDashboardExtensionsServerSettingsRequest struct {
	ctx context.Context
	ApiService *DashboardExtensionsSettingsMethodsApiService
	xTableauAuth *string
	tableauExtensionsDashboardV1ServerSettings *TableauExtensionsDashboardV1ServerSettings
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiUpdateDashboardExtensionsServerSettingsRequest) XTableauAuth(xTableauAuth string) ApiUpdateDashboardExtensionsServerSettingsRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiUpdateDashboardExtensionsServerSettingsRequest) TableauExtensionsDashboardV1ServerSettings(tableauExtensionsDashboardV1ServerSettings TableauExtensionsDashboardV1ServerSettings) ApiUpdateDashboardExtensionsServerSettingsRequest {
	r.tableauExtensionsDashboardV1ServerSettings = &tableauExtensionsDashboardV1ServerSettings
	return r
}

func (r ApiUpdateDashboardExtensionsServerSettingsRequest) Execute() (*TableauExtensionsDashboardV1ServerSettings, *http.Response, error) {
	return r.ApiService.UpdateDashboardExtensionsServerSettingsExecute(r)
}

/*
UpdateDashboardExtensionsServerSettings Update dashboard extensions settings of server

Updates the settings for dashboard extensions of a server. Permissions - This method can only be called by server administrators.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateDashboardExtensionsServerSettingsRequest
*/
func (a *DashboardExtensionsSettingsMethodsApiService) UpdateDashboardExtensionsServerSettings(ctx context.Context) ApiUpdateDashboardExtensionsServerSettingsRequest {
	return ApiUpdateDashboardExtensionsServerSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TableauExtensionsDashboardV1ServerSettings
func (a *DashboardExtensionsSettingsMethodsApiService) UpdateDashboardExtensionsServerSettingsExecute(r ApiUpdateDashboardExtensionsServerSettingsRequest) (*TableauExtensionsDashboardV1ServerSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauExtensionsDashboardV1ServerSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardExtensionsSettingsMethodsApiService.UpdateDashboardExtensionsServerSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/server/extensions/dashboard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.tableau.extensions.dashboard.v1.ServerSettings+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.extensions.dashboard.v1.ServerSettings+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	// body params
	localVarPostBody = r.tableauExtensionsDashboardV1ServerSettings
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDashboardExtensionsSiteSettingsRequest struct {
	ctx context.Context
	ApiService *DashboardExtensionsSettingsMethodsApiService
	xTableauAuth *string
	tableauExtensionsDashboardV1SiteSettings *TableauExtensionsDashboardV1SiteSettings
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiUpdateDashboardExtensionsSiteSettingsRequest) XTableauAuth(xTableauAuth string) ApiUpdateDashboardExtensionsSiteSettingsRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiUpdateDashboardExtensionsSiteSettingsRequest) TableauExtensionsDashboardV1SiteSettings(tableauExtensionsDashboardV1SiteSettings TableauExtensionsDashboardV1SiteSettings) ApiUpdateDashboardExtensionsSiteSettingsRequest {
	r.tableauExtensionsDashboardV1SiteSettings = &tableauExtensionsDashboardV1SiteSettings
	return r
}

func (r ApiUpdateDashboardExtensionsSiteSettingsRequest) Execute() (*TableauExtensionsDashboardV1SiteSettings, *http.Response, error) {
	return r.ApiService.UpdateDashboardExtensionsSiteSettingsExecute(r)
}

/*
UpdateDashboardExtensionsSiteSettings Update dashboard extension settings of site

Updates the settings for dashboard extensions for the site you are signed into. Permissions - This method can be called by site and server administrators.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateDashboardExtensionsSiteSettingsRequest
*/
func (a *DashboardExtensionsSettingsMethodsApiService) UpdateDashboardExtensionsSiteSettings(ctx context.Context) ApiUpdateDashboardExtensionsSiteSettingsRequest {
	return ApiUpdateDashboardExtensionsSiteSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TableauExtensionsDashboardV1SiteSettings
func (a *DashboardExtensionsSettingsMethodsApiService) UpdateDashboardExtensionsSiteSettingsExecute(r ApiUpdateDashboardExtensionsSiteSettingsRequest) (*TableauExtensionsDashboardV1SiteSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauExtensionsDashboardV1SiteSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardExtensionsSettingsMethodsApiService.UpdateDashboardExtensionsSiteSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/site/extensions/dashboard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.tableau.extensions.dashboard.v1.SiteSettings+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.extensions.dashboard.v1.SiteSettings+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	// body params
	localVarPostBody = r.tableauExtensionsDashboardV1SiteSettings
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

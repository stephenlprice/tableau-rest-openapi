/**
 * API Reference for Tableau Resource Versioned RESTful Endpoints
 * >The following OpenAPI documentation describes the details of the new Tableau RESTful APIs. A growing number of these are  being released alongside more than 150 [classic REST endpoints](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_ref.htm)  that are currently in wide usage in the Tableau community.    >There are some differences users of the classic endpoints will recognize when viewing these new endpoints. Request bodies for these new REST endpoints must  be formatted using JSON. Endpoint URIs don't contain an API version number. For more information, see  [REST API and Resource Versions](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm).   ![tableau platform](https://github.com/stephenlprice/tableau-rest-openapi/blob/main/assets/images/tableau-platform.png?raw=true)
 *
 * The version of the OpenAPI document: 2021.2
 * Contact: stellopricint@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiReferenceForTableauResourceVersionedResTfulEndpoints);
  }
}(this, function(expect, ApiReferenceForTableauResourceVersionedResTfulEndpoints) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiReferenceForTableauResourceVersionedResTfulEndpoints.AnalyticsExtensionsSettingsMethodsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AnalyticsExtensionsSettingsMethodsApi', function() {
    describe('addAnalyticsExtensionsConnection', function() {
      it('should call addAnalyticsExtensionsConnection successfully', function(done) {
        //uncomment below and update the code to test addAnalyticsExtensionsConnection
        //instance.addAnalyticsExtensionsConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAnalyticsExtensionsConnection', function() {
      it('should call deleteAnalyticsExtensionsConnection successfully', function(done) {
        //uncomment below and update the code to test deleteAnalyticsExtensionsConnection
        //instance.deleteAnalyticsExtensionsConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteConnectionFromWorkbook', function() {
      it('should call deleteConnectionFromWorkbook successfully', function(done) {
        //uncomment below and update the code to test deleteConnectionFromWorkbook
        //instance.deleteConnectionFromWorkbook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAnalyticsExtensionsConnection', function() {
      it('should call getAnalyticsExtensionsConnection successfully', function(done) {
        //uncomment below and update the code to test getAnalyticsExtensionsConnection
        //instance.getAnalyticsExtensionsConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAnalyticsExtensionsConnections', function() {
      it('should call getAnalyticsExtensionsConnections successfully', function(done) {
        //uncomment below and update the code to test getAnalyticsExtensionsConnections
        //instance.getAnalyticsExtensionsConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAnalyticsExtensionsServerSettings', function() {
      it('should call getAnalyticsExtensionsServerSettings successfully', function(done) {
        //uncomment below and update the code to test getAnalyticsExtensionsServerSettings
        //instance.getAnalyticsExtensionsServerSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAnalyticsExtensionsSiteSettings', function() {
      it('should call getAnalyticsExtensionsSiteSettings successfully', function(done) {
        //uncomment below and update the code to test getAnalyticsExtensionsSiteSettings
        //instance.getAnalyticsExtensionsSiteSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConnectionOptionsForWorkbook', function() {
      it('should call getConnectionOptionsForWorkbook successfully', function(done) {
        //uncomment below and update the code to test getConnectionOptionsForWorkbook
        //instance.getConnectionOptionsForWorkbook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSelectedConnectionForWorkbook', function() {
      it('should call getSelectedConnectionForWorkbook successfully', function(done) {
        //uncomment below and update the code to test getSelectedConnectionForWorkbook
        //instance.getSelectedConnectionForWorkbook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAnalyticsExtensionsConnection', function() {
      it('should call updateAnalyticsExtensionsConnection successfully', function(done) {
        //uncomment below and update the code to test updateAnalyticsExtensionsConnection
        //instance.updateAnalyticsExtensionsConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAnalyticsExtensionsServerSettings', function() {
      it('should call updateAnalyticsExtensionsServerSettings successfully', function(done) {
        //uncomment below and update the code to test updateAnalyticsExtensionsServerSettings
        //instance.updateAnalyticsExtensionsServerSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAnalyticsExtensionsSiteSettings', function() {
      it('should call updateAnalyticsExtensionsSiteSettings successfully', function(done) {
        //uncomment below and update the code to test updateAnalyticsExtensionsSiteSettings
        //instance.updateAnalyticsExtensionsSiteSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWorkbookWithConnection', function() {
      it('should call updateWorkbookWithConnection successfully', function(done) {
        //uncomment below and update the code to test updateWorkbookWithConnection
        //instance.updateWorkbookWithConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));

/*
 * API Reference for Tableau Resource Versioned RESTful Endpoints
 * >The following OpenAPI documentation describes the details of the new Tableau RESTful APIs. A growing number of these are  being released alongside more than 150 [classic REST endpoints](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_ref.htm)  that are currently in wide usage in the Tableau community.    >There are some differences users of the classic endpoints will recognize when viewing these new endpoints. Request bodies for these new REST endpoints must  be formatted using JSON. Endpoint URIs don't contain an API version number. For more information, see  [REST API and Resource Versions](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm).   ![tableau platform](https://github.com/stephenlprice/tableau-rest-openapi/blob/main/assets/images/tableau-platform.png?raw=true)
 *
 * The version of the OpenAPI document: 2021.2
 * Contact: stellopricint@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InvalidAuth;
import org.openapitools.client.model.InvalidConnectionHostName;
import org.openapitools.client.model.InvalidConnectionPassword;
import org.openapitools.client.model.InvalidConnectionPort;
import org.openapitools.client.model.InvalidConnectionSSLSettings;
import org.openapitools.client.model.InvalidConnectionType;
import org.openapitools.client.model.InvalidConnectionUsername;
import org.openapitools.client.model.MissingAuth;
import org.openapitools.client.model.MultipleConnectionsAttempted;
import org.openapitools.client.model.OneOfInvalidConnectionHostNameInvalidConnectionPortInvalidConnectionTypeInvalidConnectionUsernameInvalidConnectionPasswordInvalidConnectionSSLSettings;
import org.openapitools.client.model.OneOfInvalidConnectionHostNameInvalidConnectionTypeInvalidConnectionPortInvalidConnectionUsernameInvalidConnectionPasswordInvalidConnectionSSLSettings;
import org.openapitools.client.model.OneOfMissingAuthInvalidAuth;
import org.openapitools.client.model.OneOfMultipleConnectionsAttemptedInvalidConnectionHostNameInvalidConnectionPortInvalidConnectionTypeInvalidConnectionUsernameInvalidConnectionPasswordInvalidConnectionSSLSettings;
import org.openapitools.client.model.TableauAnalyticsextensionsV1ConnectionItem;
import org.openapitools.client.model.TableauAnalyticsextensionsV1ConnectionList;
import org.openapitools.client.model.TableauAnalyticsextensionsV1ConnectionMapping;
import org.openapitools.client.model.TableauAnalyticsextensionsV1ConnectionMetadata;
import org.openapitools.client.model.TableauAnalyticsextensionsV1ConnectionMetadataList;
import org.openapitools.client.model.TableauAnalyticsextensionsV1ServerSettings;
import org.openapitools.client.model.TableauAnalyticsextensionsV1SiteSettings;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AnalyticsExtensionsSettingsMethodsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnalyticsExtensionsSettingsMethodsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnalyticsExtensionsSettingsMethodsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addAnalyticsExtensionsConnection
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1ConnectionItem  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAnalyticsExtensionsConnectionCall(String xTableauAuth, TableauAnalyticsextensionsV1ConnectionItem tableauAnalyticsextensionsV1ConnectionItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tableauAnalyticsextensionsV1ConnectionItem;

        // create path and map variables
        String localVarPath = "/api/-/settings/site/extensions/analytics/connections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.analyticsextensions.v1.ConnectionItem+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.tableau.analyticsextensions.v1.ConnectionItem+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAnalyticsExtensionsConnectionValidateBeforeCall(String xTableauAuth, TableauAnalyticsextensionsV1ConnectionItem tableauAnalyticsextensionsV1ConnectionItem, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addAnalyticsExtensionsConnectionCall(xTableauAuth, tableauAnalyticsextensionsV1ConnectionItem, _callback);
        return localVarCall;

    }

    /**
     * Add analytics extension connection to site
     * Adds a connection to an external service for analytics extensions on this site. Permissions - This method can be called by site and server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1ConnectionItem  (optional)
     * @return TableauAnalyticsextensionsV1ConnectionItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public TableauAnalyticsextensionsV1ConnectionItem addAnalyticsExtensionsConnection(String xTableauAuth, TableauAnalyticsextensionsV1ConnectionItem tableauAnalyticsextensionsV1ConnectionItem) throws ApiException {
        ApiResponse<TableauAnalyticsextensionsV1ConnectionItem> localVarResp = addAnalyticsExtensionsConnectionWithHttpInfo(xTableauAuth, tableauAnalyticsextensionsV1ConnectionItem);
        return localVarResp.getData();
    }

    /**
     * Add analytics extension connection to site
     * Adds a connection to an external service for analytics extensions on this site. Permissions - This method can be called by site and server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1ConnectionItem  (optional)
     * @return ApiResponse&lt;TableauAnalyticsextensionsV1ConnectionItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauAnalyticsextensionsV1ConnectionItem> addAnalyticsExtensionsConnectionWithHttpInfo(String xTableauAuth, TableauAnalyticsextensionsV1ConnectionItem tableauAnalyticsextensionsV1ConnectionItem) throws ApiException {
        okhttp3.Call localVarCall = addAnalyticsExtensionsConnectionValidateBeforeCall(xTableauAuth, tableauAnalyticsextensionsV1ConnectionItem, null);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1ConnectionItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add analytics extension connection to site (asynchronously)
     * Adds a connection to an external service for analytics extensions on this site. Permissions - This method can be called by site and server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1ConnectionItem  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAnalyticsExtensionsConnectionAsync(String xTableauAuth, TableauAnalyticsextensionsV1ConnectionItem tableauAnalyticsextensionsV1ConnectionItem, final ApiCallback<TableauAnalyticsextensionsV1ConnectionItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAnalyticsExtensionsConnectionValidateBeforeCall(xTableauAuth, tableauAnalyticsextensionsV1ConnectionItem, _callback);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1ConnectionItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAnalyticsExtensionsConnection
     * @param connectionLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnalyticsExtensionsConnectionCall(String connectionLuid, String xTableauAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/-/settings/site/extensions/analytics/connections/{connection_luid}"
            .replaceAll("\\{" + "connection_luid" + "\\}", localVarApiClient.escapeString(connectionLuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAnalyticsExtensionsConnectionValidateBeforeCall(String connectionLuid, String xTableauAuth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'connectionLuid' is set
        if (connectionLuid == null) {
            throw new ApiException("Missing the required parameter 'connectionLuid' when calling deleteAnalyticsExtensionsConnection(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAnalyticsExtensionsConnectionCall(connectionLuid, xTableauAuth, _callback);
        return localVarCall;

    }

    /**
     * Delete analytics extension connection from site
     * Deletes a specific analytics extension connection for an external service from a site. Permissions - This method can be called by site and server administrators.
     * @param connectionLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAnalyticsExtensionsConnection(String connectionLuid, String xTableauAuth) throws ApiException {
        deleteAnalyticsExtensionsConnectionWithHttpInfo(connectionLuid, xTableauAuth);
    }

    /**
     * Delete analytics extension connection from site
     * Deletes a specific analytics extension connection for an external service from a site. Permissions - This method can be called by site and server administrators.
     * @param connectionLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAnalyticsExtensionsConnectionWithHttpInfo(String connectionLuid, String xTableauAuth) throws ApiException {
        okhttp3.Call localVarCall = deleteAnalyticsExtensionsConnectionValidateBeforeCall(connectionLuid, xTableauAuth, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete analytics extension connection from site (asynchronously)
     * Deletes a specific analytics extension connection for an external service from a site. Permissions - This method can be called by site and server administrators.
     * @param connectionLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnalyticsExtensionsConnectionAsync(String connectionLuid, String xTableauAuth, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAnalyticsExtensionsConnectionValidateBeforeCall(connectionLuid, xTableauAuth, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteConnectionFromWorkbook
     * @param workbookLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConnectionFromWorkbookCall(String workbookLuid, String xTableauAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/-/settings/site/extensions/analytics/workbooks/{workbook_luid}/selected_connection"
            .replaceAll("\\{" + "workbook_luid" + "\\}", localVarApiClient.escapeString(workbookLuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConnectionFromWorkbookValidateBeforeCall(String workbookLuid, String xTableauAuth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'workbookLuid' is set
        if (workbookLuid == null) {
            throw new ApiException("Missing the required parameter 'workbookLuid' when calling deleteConnectionFromWorkbook(Async)");
        }
        

        okhttp3.Call localVarCall = deleteConnectionFromWorkbookCall(workbookLuid, xTableauAuth, _callback);
        return localVarCall;

    }

    /**
     * Remove current analytics extension connection for workbook
     * Remove the currently used analytics extension connection to an external service  from the specified workbook. The connection remains configured, and is available for further usage by the workbook. Permissions - This method can be called by users with authoring access to the workbook.
     * @param workbookLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteConnectionFromWorkbook(String workbookLuid, String xTableauAuth) throws ApiException {
        deleteConnectionFromWorkbookWithHttpInfo(workbookLuid, xTableauAuth);
    }

    /**
     * Remove current analytics extension connection for workbook
     * Remove the currently used analytics extension connection to an external service  from the specified workbook. The connection remains configured, and is available for further usage by the workbook. Permissions - This method can be called by users with authoring access to the workbook.
     * @param workbookLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteConnectionFromWorkbookWithHttpInfo(String workbookLuid, String xTableauAuth) throws ApiException {
        okhttp3.Call localVarCall = deleteConnectionFromWorkbookValidateBeforeCall(workbookLuid, xTableauAuth, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove current analytics extension connection for workbook (asynchronously)
     * Remove the currently used analytics extension connection to an external service  from the specified workbook. The connection remains configured, and is available for further usage by the workbook. Permissions - This method can be called by users with authoring access to the workbook.
     * @param workbookLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConnectionFromWorkbookAsync(String workbookLuid, String xTableauAuth, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConnectionFromWorkbookValidateBeforeCall(workbookLuid, xTableauAuth, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnalyticsExtensionsConnection
     * @param connectionLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsExtensionsConnectionCall(String connectionLuid, String xTableauAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/-/settings/site/extensions/analytics/connections/{connection_luid}"
            .replaceAll("\\{" + "connection_luid" + "\\}", localVarApiClient.escapeString(connectionLuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.analyticsextensions.v1.ConnectionItem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyticsExtensionsConnectionValidateBeforeCall(String connectionLuid, String xTableauAuth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'connectionLuid' is set
        if (connectionLuid == null) {
            throw new ApiException("Missing the required parameter 'connectionLuid' when calling getAnalyticsExtensionsConnection(Async)");
        }
        

        okhttp3.Call localVarCall = getAnalyticsExtensionsConnectionCall(connectionLuid, xTableauAuth, _callback);
        return localVarCall;

    }

    /**
     * Get analytics extension details
     * Get the details of a specified analytics extension connection to an external service. Permissions - This method can only be called by users with server or site administrator permissions.
     * @param connectionLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return TableauAnalyticsextensionsV1ConnectionItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public TableauAnalyticsextensionsV1ConnectionItem getAnalyticsExtensionsConnection(String connectionLuid, String xTableauAuth) throws ApiException {
        ApiResponse<TableauAnalyticsextensionsV1ConnectionItem> localVarResp = getAnalyticsExtensionsConnectionWithHttpInfo(connectionLuid, xTableauAuth);
        return localVarResp.getData();
    }

    /**
     * Get analytics extension details
     * Get the details of a specified analytics extension connection to an external service. Permissions - This method can only be called by users with server or site administrator permissions.
     * @param connectionLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return ApiResponse&lt;TableauAnalyticsextensionsV1ConnectionItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauAnalyticsextensionsV1ConnectionItem> getAnalyticsExtensionsConnectionWithHttpInfo(String connectionLuid, String xTableauAuth) throws ApiException {
        okhttp3.Call localVarCall = getAnalyticsExtensionsConnectionValidateBeforeCall(connectionLuid, xTableauAuth, null);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1ConnectionItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get analytics extension details (asynchronously)
     * Get the details of a specified analytics extension connection to an external service. Permissions - This method can only be called by users with server or site administrator permissions.
     * @param connectionLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsExtensionsConnectionAsync(String connectionLuid, String xTableauAuth, final ApiCallback<TableauAnalyticsextensionsV1ConnectionItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyticsExtensionsConnectionValidateBeforeCall(connectionLuid, xTableauAuth, _callback);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1ConnectionItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnalyticsExtensionsConnections
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsExtensionsConnectionsCall(String xTableauAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/-/settings/site/extensions/analytics/connections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.analyticsextensions.v1.ConnectionList+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyticsExtensionsConnectionsValidateBeforeCall(String xTableauAuth, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAnalyticsExtensionsConnectionsCall(xTableauAuth, _callback);
        return localVarCall;

    }

    /**
     * List analytics extension connections on site
     * Lists a site&#39;s analytics extension connections for external services. Permissions- This method can be called by site and server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return TableauAnalyticsextensionsV1ConnectionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public TableauAnalyticsextensionsV1ConnectionList getAnalyticsExtensionsConnections(String xTableauAuth) throws ApiException {
        ApiResponse<TableauAnalyticsextensionsV1ConnectionList> localVarResp = getAnalyticsExtensionsConnectionsWithHttpInfo(xTableauAuth);
        return localVarResp.getData();
    }

    /**
     * List analytics extension connections on site
     * Lists a site&#39;s analytics extension connections for external services. Permissions- This method can be called by site and server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return ApiResponse&lt;TableauAnalyticsextensionsV1ConnectionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauAnalyticsextensionsV1ConnectionList> getAnalyticsExtensionsConnectionsWithHttpInfo(String xTableauAuth) throws ApiException {
        okhttp3.Call localVarCall = getAnalyticsExtensionsConnectionsValidateBeforeCall(xTableauAuth, null);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1ConnectionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List analytics extension connections on site (asynchronously)
     * Lists a site&#39;s analytics extension connections for external services. Permissions- This method can be called by site and server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsExtensionsConnectionsAsync(String xTableauAuth, final ApiCallback<TableauAnalyticsextensionsV1ConnectionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyticsExtensionsConnectionsValidateBeforeCall(xTableauAuth, _callback);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1ConnectionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnalyticsExtensionsServerSettings
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server  permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsExtensionsServerSettingsCall(String xTableauAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/-/settings/server/extensions/analytics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.analyticsextensions.v1.ServerSettings+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyticsExtensionsServerSettingsValidateBeforeCall(String xTableauAuth, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAnalyticsExtensionsServerSettingsCall(xTableauAuth, _callback);
        return localVarCall;

    }

    /**
     * Get enabled state of analytics extensions on server
     * Gets the enabled/disabled state of analytics extensions on a server. Permissions - This method can only be called by server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return TableauAnalyticsextensionsV1ServerSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server  permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public TableauAnalyticsextensionsV1ServerSettings getAnalyticsExtensionsServerSettings(String xTableauAuth) throws ApiException {
        ApiResponse<TableauAnalyticsextensionsV1ServerSettings> localVarResp = getAnalyticsExtensionsServerSettingsWithHttpInfo(xTableauAuth);
        return localVarResp.getData();
    }

    /**
     * Get enabled state of analytics extensions on server
     * Gets the enabled/disabled state of analytics extensions on a server. Permissions - This method can only be called by server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return ApiResponse&lt;TableauAnalyticsextensionsV1ServerSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server  permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauAnalyticsextensionsV1ServerSettings> getAnalyticsExtensionsServerSettingsWithHttpInfo(String xTableauAuth) throws ApiException {
        okhttp3.Call localVarCall = getAnalyticsExtensionsServerSettingsValidateBeforeCall(xTableauAuth, null);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1ServerSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get enabled state of analytics extensions on server (asynchronously)
     * Gets the enabled/disabled state of analytics extensions on a server. Permissions - This method can only be called by server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server  permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsExtensionsServerSettingsAsync(String xTableauAuth, final ApiCallback<TableauAnalyticsextensionsV1ServerSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyticsExtensionsServerSettingsValidateBeforeCall(xTableauAuth, _callback);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1ServerSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnalyticsExtensionsSiteSettings
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsExtensionsSiteSettingsCall(String xTableauAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/-/settings/site/extensions/analytics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.analyticsextensions.v1.SiteSettings+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyticsExtensionsSiteSettingsValidateBeforeCall(String xTableauAuth, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAnalyticsExtensionsSiteSettingsCall(xTableauAuth, _callback);
        return localVarCall;

    }

    /**
     * Get enabled state of analytics extensions on site
     * Gets the enabled/disabled state of analytics extensions on a site. Permissions - This method can be called by site and server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return TableauAnalyticsextensionsV1SiteSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public TableauAnalyticsextensionsV1SiteSettings getAnalyticsExtensionsSiteSettings(String xTableauAuth) throws ApiException {
        ApiResponse<TableauAnalyticsextensionsV1SiteSettings> localVarResp = getAnalyticsExtensionsSiteSettingsWithHttpInfo(xTableauAuth);
        return localVarResp.getData();
    }

    /**
     * Get enabled state of analytics extensions on site
     * Gets the enabled/disabled state of analytics extensions on a site. Permissions - This method can be called by site and server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return ApiResponse&lt;TableauAnalyticsextensionsV1SiteSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauAnalyticsextensionsV1SiteSettings> getAnalyticsExtensionsSiteSettingsWithHttpInfo(String xTableauAuth) throws ApiException {
        okhttp3.Call localVarCall = getAnalyticsExtensionsSiteSettingsValidateBeforeCall(xTableauAuth, null);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1SiteSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get enabled state of analytics extensions on site (asynchronously)
     * Gets the enabled/disabled state of analytics extensions on a site. Permissions - This method can be called by site and server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsExtensionsSiteSettingsAsync(String xTableauAuth, final ApiCallback<TableauAnalyticsextensionsV1SiteSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyticsExtensionsSiteSettingsValidateBeforeCall(xTableauAuth, _callback);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1SiteSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConnectionOptionsForWorkbook
     * @param workbookLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConnectionOptionsForWorkbookCall(String workbookLuid, String xTableauAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/-/settings/site/extensions/analytics/workbooks/{workbook_luid}/connections"
            .replaceAll("\\{" + "workbook_luid" + "\\}", localVarApiClient.escapeString(workbookLuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.analyticsextensions.v1.ConnectionMetadataList+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectionOptionsForWorkbookValidateBeforeCall(String workbookLuid, String xTableauAuth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'workbookLuid' is set
        if (workbookLuid == null) {
            throw new ApiException("Missing the required parameter 'workbookLuid' when calling getConnectionOptionsForWorkbook(Async)");
        }
        

        okhttp3.Call localVarCall = getConnectionOptionsForWorkbookCall(workbookLuid, xTableauAuth, _callback);
        return localVarCall;

    }

    /**
     * List analytics extension connections of workbook
     * Lists basic details of each analytics extension connection available for a specified workbook, including connection type and name. Permissions - This method can be called by users that have permissions to the specified workbook.
     * @param workbookLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return TableauAnalyticsextensionsV1ConnectionMetadataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public TableauAnalyticsextensionsV1ConnectionMetadataList getConnectionOptionsForWorkbook(String workbookLuid, String xTableauAuth) throws ApiException {
        ApiResponse<TableauAnalyticsextensionsV1ConnectionMetadataList> localVarResp = getConnectionOptionsForWorkbookWithHttpInfo(workbookLuid, xTableauAuth);
        return localVarResp.getData();
    }

    /**
     * List analytics extension connections of workbook
     * Lists basic details of each analytics extension connection available for a specified workbook, including connection type and name. Permissions - This method can be called by users that have permissions to the specified workbook.
     * @param workbookLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return ApiResponse&lt;TableauAnalyticsextensionsV1ConnectionMetadataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauAnalyticsextensionsV1ConnectionMetadataList> getConnectionOptionsForWorkbookWithHttpInfo(String workbookLuid, String xTableauAuth) throws ApiException {
        okhttp3.Call localVarCall = getConnectionOptionsForWorkbookValidateBeforeCall(workbookLuid, xTableauAuth, null);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1ConnectionMetadataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List analytics extension connections of workbook (asynchronously)
     * Lists basic details of each analytics extension connection available for a specified workbook, including connection type and name. Permissions - This method can be called by users that have permissions to the specified workbook.
     * @param workbookLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConnectionOptionsForWorkbookAsync(String workbookLuid, String xTableauAuth, final ApiCallback<TableauAnalyticsextensionsV1ConnectionMetadataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectionOptionsForWorkbookValidateBeforeCall(workbookLuid, xTableauAuth, _callback);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1ConnectionMetadataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelectedConnectionForWorkbook
     * @param workbookLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelectedConnectionForWorkbookCall(String workbookLuid, String xTableauAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/-/settings/site/extensions/analytics/workbooks/{workbook_luid}/selected_connection"
            .replaceAll("\\{" + "workbook_luid" + "\\}", localVarApiClient.escapeString(workbookLuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.analyticsextensions.v1.ConnectionMetadata+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelectedConnectionForWorkbookValidateBeforeCall(String workbookLuid, String xTableauAuth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'workbookLuid' is set
        if (workbookLuid == null) {
            throw new ApiException("Missing the required parameter 'workbookLuid' when calling getSelectedConnectionForWorkbook(Async)");
        }
        

        okhttp3.Call localVarCall = getSelectedConnectionForWorkbookCall(workbookLuid, xTableauAuth, _callback);
        return localVarCall;

    }

    /**
     * Get current analytics extension for workbook
     * Gets basic details, including connection type and name, of the analytics extension connection to an external service that the specified workbook is currently using. Permissions - This method can be called by users with authoring access to the workbook.
     * @param workbookLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return TableauAnalyticsextensionsV1ConnectionMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public TableauAnalyticsextensionsV1ConnectionMetadata getSelectedConnectionForWorkbook(String workbookLuid, String xTableauAuth) throws ApiException {
        ApiResponse<TableauAnalyticsextensionsV1ConnectionMetadata> localVarResp = getSelectedConnectionForWorkbookWithHttpInfo(workbookLuid, xTableauAuth);
        return localVarResp.getData();
    }

    /**
     * Get current analytics extension for workbook
     * Gets basic details, including connection type and name, of the analytics extension connection to an external service that the specified workbook is currently using. Permissions - This method can be called by users with authoring access to the workbook.
     * @param workbookLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return ApiResponse&lt;TableauAnalyticsextensionsV1ConnectionMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauAnalyticsextensionsV1ConnectionMetadata> getSelectedConnectionForWorkbookWithHttpInfo(String workbookLuid, String xTableauAuth) throws ApiException {
        okhttp3.Call localVarCall = getSelectedConnectionForWorkbookValidateBeforeCall(workbookLuid, xTableauAuth, null);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1ConnectionMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get current analytics extension for workbook (asynchronously)
     * Gets basic details, including connection type and name, of the analytics extension connection to an external service that the specified workbook is currently using. Permissions - This method can be called by users with authoring access to the workbook.
     * @param workbookLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelectedConnectionForWorkbookAsync(String workbookLuid, String xTableauAuth, final ApiCallback<TableauAnalyticsextensionsV1ConnectionMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelectedConnectionForWorkbookValidateBeforeCall(workbookLuid, xTableauAuth, _callback);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1ConnectionMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAnalyticsExtensionsConnection
     * @param connectionLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1ConnectionItem  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnalyticsExtensionsConnectionCall(String connectionLuid, String xTableauAuth, TableauAnalyticsextensionsV1ConnectionItem tableauAnalyticsextensionsV1ConnectionItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tableauAnalyticsextensionsV1ConnectionItem;

        // create path and map variables
        String localVarPath = "/api/-/settings/site/extensions/analytics/connections/{connection_luid}"
            .replaceAll("\\{" + "connection_luid" + "\\}", localVarApiClient.escapeString(connectionLuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.analyticsextensions.v1.ConnectionItem+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.tableau.analyticsextensions.v1.ConnectionItem+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAnalyticsExtensionsConnectionValidateBeforeCall(String connectionLuid, String xTableauAuth, TableauAnalyticsextensionsV1ConnectionItem tableauAnalyticsextensionsV1ConnectionItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'connectionLuid' is set
        if (connectionLuid == null) {
            throw new ApiException("Missing the required parameter 'connectionLuid' when calling updateAnalyticsExtensionsConnection(Async)");
        }
        

        okhttp3.Call localVarCall = updateAnalyticsExtensionsConnectionCall(connectionLuid, xTableauAuth, tableauAnalyticsextensionsV1ConnectionItem, _callback);
        return localVarCall;

    }

    /**
     * Update analytics extension connection of site
     * Updates the details of specified analytics extension connection for an external service to a site. Permissions - This method can be called by site and server administrators.
     * @param connectionLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1ConnectionItem  (optional)
     * @return TableauAnalyticsextensionsV1ConnectionItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public TableauAnalyticsextensionsV1ConnectionItem updateAnalyticsExtensionsConnection(String connectionLuid, String xTableauAuth, TableauAnalyticsextensionsV1ConnectionItem tableauAnalyticsextensionsV1ConnectionItem) throws ApiException {
        ApiResponse<TableauAnalyticsextensionsV1ConnectionItem> localVarResp = updateAnalyticsExtensionsConnectionWithHttpInfo(connectionLuid, xTableauAuth, tableauAnalyticsextensionsV1ConnectionItem);
        return localVarResp.getData();
    }

    /**
     * Update analytics extension connection of site
     * Updates the details of specified analytics extension connection for an external service to a site. Permissions - This method can be called by site and server administrators.
     * @param connectionLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1ConnectionItem  (optional)
     * @return ApiResponse&lt;TableauAnalyticsextensionsV1ConnectionItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauAnalyticsextensionsV1ConnectionItem> updateAnalyticsExtensionsConnectionWithHttpInfo(String connectionLuid, String xTableauAuth, TableauAnalyticsextensionsV1ConnectionItem tableauAnalyticsextensionsV1ConnectionItem) throws ApiException {
        okhttp3.Call localVarCall = updateAnalyticsExtensionsConnectionValidateBeforeCall(connectionLuid, xTableauAuth, tableauAnalyticsextensionsV1ConnectionItem, null);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1ConnectionItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update analytics extension connection of site (asynchronously)
     * Updates the details of specified analytics extension connection for an external service to a site. Permissions - This method can be called by site and server administrators.
     * @param connectionLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1ConnectionItem  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnalyticsExtensionsConnectionAsync(String connectionLuid, String xTableauAuth, TableauAnalyticsextensionsV1ConnectionItem tableauAnalyticsextensionsV1ConnectionItem, final ApiCallback<TableauAnalyticsextensionsV1ConnectionItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAnalyticsExtensionsConnectionValidateBeforeCall(connectionLuid, xTableauAuth, tableauAnalyticsextensionsV1ConnectionItem, _callback);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1ConnectionItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAnalyticsExtensionsServerSettings
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1ServerSettings  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server  permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnalyticsExtensionsServerSettingsCall(String xTableauAuth, TableauAnalyticsextensionsV1ServerSettings tableauAnalyticsextensionsV1ServerSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tableauAnalyticsextensionsV1ServerSettings;

        // create path and map variables
        String localVarPath = "/api/-/settings/server/extensions/analytics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.analyticsextensions.v1.ServerSettings+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.tableau.analyticsextensions.v1.ServerSettings+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAnalyticsExtensionsServerSettingsValidateBeforeCall(String xTableauAuth, TableauAnalyticsextensionsV1ServerSettings tableauAnalyticsextensionsV1ServerSettings, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = updateAnalyticsExtensionsServerSettingsCall(xTableauAuth, tableauAnalyticsextensionsV1ServerSettings, _callback);
        return localVarCall;

    }

    /**
     * Enable/disable analytics extensions on server
     * Enables or disables analytics extensions on a server. Permissions - This method can only be called by server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1ServerSettings  (optional)
     * @return TableauAnalyticsextensionsV1ServerSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server  permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public TableauAnalyticsextensionsV1ServerSettings updateAnalyticsExtensionsServerSettings(String xTableauAuth, TableauAnalyticsextensionsV1ServerSettings tableauAnalyticsextensionsV1ServerSettings) throws ApiException {
        ApiResponse<TableauAnalyticsextensionsV1ServerSettings> localVarResp = updateAnalyticsExtensionsServerSettingsWithHttpInfo(xTableauAuth, tableauAnalyticsextensionsV1ServerSettings);
        return localVarResp.getData();
    }

    /**
     * Enable/disable analytics extensions on server
     * Enables or disables analytics extensions on a server. Permissions - This method can only be called by server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1ServerSettings  (optional)
     * @return ApiResponse&lt;TableauAnalyticsextensionsV1ServerSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server  permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauAnalyticsextensionsV1ServerSettings> updateAnalyticsExtensionsServerSettingsWithHttpInfo(String xTableauAuth, TableauAnalyticsextensionsV1ServerSettings tableauAnalyticsextensionsV1ServerSettings) throws ApiException {
        okhttp3.Call localVarCall = updateAnalyticsExtensionsServerSettingsValidateBeforeCall(xTableauAuth, tableauAnalyticsextensionsV1ServerSettings, null);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1ServerSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable/disable analytics extensions on server (asynchronously)
     * Enables or disables analytics extensions on a server. Permissions - This method can only be called by server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1ServerSettings  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server  permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnalyticsExtensionsServerSettingsAsync(String xTableauAuth, TableauAnalyticsextensionsV1ServerSettings tableauAnalyticsextensionsV1ServerSettings, final ApiCallback<TableauAnalyticsextensionsV1ServerSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAnalyticsExtensionsServerSettingsValidateBeforeCall(xTableauAuth, tableauAnalyticsextensionsV1ServerSettings, _callback);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1ServerSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAnalyticsExtensionsSiteSettings
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1SiteSettings  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnalyticsExtensionsSiteSettingsCall(String xTableauAuth, TableauAnalyticsextensionsV1SiteSettings tableauAnalyticsextensionsV1SiteSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tableauAnalyticsextensionsV1SiteSettings;

        // create path and map variables
        String localVarPath = "/api/-/settings/site/extensions/analytics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.analyticsextensions.v1.SiteSettings+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.tableau.analyticsextensions.v1.SiteSettings+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAnalyticsExtensionsSiteSettingsValidateBeforeCall(String xTableauAuth, TableauAnalyticsextensionsV1SiteSettings tableauAnalyticsextensionsV1SiteSettings, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = updateAnalyticsExtensionsSiteSettingsCall(xTableauAuth, tableauAnalyticsextensionsV1SiteSettings, _callback);
        return localVarCall;

    }

    /**
     * Update enabled state of analytics extensions on site
     * Enables or disables analytics extensions on a site. Permissions - This method can be called by site and server administrators. Availability - This method is not available for Tableau Online.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1SiteSettings  (optional)
     * @return TableauAnalyticsextensionsV1SiteSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public TableauAnalyticsextensionsV1SiteSettings updateAnalyticsExtensionsSiteSettings(String xTableauAuth, TableauAnalyticsextensionsV1SiteSettings tableauAnalyticsextensionsV1SiteSettings) throws ApiException {
        ApiResponse<TableauAnalyticsextensionsV1SiteSettings> localVarResp = updateAnalyticsExtensionsSiteSettingsWithHttpInfo(xTableauAuth, tableauAnalyticsextensionsV1SiteSettings);
        return localVarResp.getData();
    }

    /**
     * Update enabled state of analytics extensions on site
     * Enables or disables analytics extensions on a site. Permissions - This method can be called by site and server administrators. Availability - This method is not available for Tableau Online.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1SiteSettings  (optional)
     * @return ApiResponse&lt;TableauAnalyticsextensionsV1SiteSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauAnalyticsextensionsV1SiteSettings> updateAnalyticsExtensionsSiteSettingsWithHttpInfo(String xTableauAuth, TableauAnalyticsextensionsV1SiteSettings tableauAnalyticsextensionsV1SiteSettings) throws ApiException {
        okhttp3.Call localVarCall = updateAnalyticsExtensionsSiteSettingsValidateBeforeCall(xTableauAuth, tableauAnalyticsextensionsV1SiteSettings, null);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1SiteSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update enabled state of analytics extensions on site (asynchronously)
     * Enables or disables analytics extensions on a site. Permissions - This method can be called by site and server administrators. Availability - This method is not available for Tableau Online.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1SiteSettings  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnalyticsExtensionsSiteSettingsAsync(String xTableauAuth, TableauAnalyticsextensionsV1SiteSettings tableauAnalyticsextensionsV1SiteSettings, final ApiCallback<TableauAnalyticsextensionsV1SiteSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAnalyticsExtensionsSiteSettingsValidateBeforeCall(xTableauAuth, tableauAnalyticsextensionsV1SiteSettings, _callback);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1SiteSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWorkbookWithConnection
     * @param workbookLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1ConnectionMapping  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkbookWithConnectionCall(String workbookLuid, String xTableauAuth, TableauAnalyticsextensionsV1ConnectionMapping tableauAnalyticsextensionsV1ConnectionMapping, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tableauAnalyticsextensionsV1ConnectionMapping;

        // create path and map variables
        String localVarPath = "/api/-/settings/site/extensions/analytics/workbooks/{workbook_luid}/selected_connection"
            .replaceAll("\\{" + "workbook_luid" + "\\}", localVarApiClient.escapeString(workbookLuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.analyticsextensions.v1.ConnectionMapping+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.tableau.analyticsextensions.v1.ConnectionMapping+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkbookWithConnectionValidateBeforeCall(String workbookLuid, String xTableauAuth, TableauAnalyticsextensionsV1ConnectionMapping tableauAnalyticsextensionsV1ConnectionMapping, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'workbookLuid' is set
        if (workbookLuid == null) {
            throw new ApiException("Missing the required parameter 'workbookLuid' when calling updateWorkbookWithConnection(Async)");
        }
        

        okhttp3.Call localVarCall = updateWorkbookWithConnectionCall(workbookLuid, xTableauAuth, tableauAnalyticsextensionsV1ConnectionMapping, _callback);
        return localVarCall;

    }

    /**
     * Update analytics extension for workbook
     * Updates the analytics extension connection to external service currently used by a workbook. Permissions - This method can be called by users that have permissions to the specified workbook.
     * @param workbookLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1ConnectionMapping  (optional)
     * @return TableauAnalyticsextensionsV1ConnectionMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public TableauAnalyticsextensionsV1ConnectionMapping updateWorkbookWithConnection(String workbookLuid, String xTableauAuth, TableauAnalyticsextensionsV1ConnectionMapping tableauAnalyticsextensionsV1ConnectionMapping) throws ApiException {
        ApiResponse<TableauAnalyticsextensionsV1ConnectionMapping> localVarResp = updateWorkbookWithConnectionWithHttpInfo(workbookLuid, xTableauAuth, tableauAnalyticsextensionsV1ConnectionMapping);
        return localVarResp.getData();
    }

    /**
     * Update analytics extension for workbook
     * Updates the analytics extension connection to external service currently used by a workbook. Permissions - This method can be called by users that have permissions to the specified workbook.
     * @param workbookLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1ConnectionMapping  (optional)
     * @return ApiResponse&lt;TableauAnalyticsextensionsV1ConnectionMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauAnalyticsextensionsV1ConnectionMapping> updateWorkbookWithConnectionWithHttpInfo(String workbookLuid, String xTableauAuth, TableauAnalyticsextensionsV1ConnectionMapping tableauAnalyticsextensionsV1ConnectionMapping) throws ApiException {
        okhttp3.Call localVarCall = updateWorkbookWithConnectionValidateBeforeCall(workbookLuid, xTableauAuth, tableauAnalyticsextensionsV1ConnectionMapping, null);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1ConnectionMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update analytics extension for workbook (asynchronously)
     * Updates the analytics extension connection to external service currently used by a workbook. Permissions - This method can be called by users that have permissions to the specified workbook.
     * @param workbookLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauAnalyticsextensionsV1ConnectionMapping  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkbookWithConnectionAsync(String workbookLuid, String xTableauAuth, TableauAnalyticsextensionsV1ConnectionMapping tableauAnalyticsextensionsV1ConnectionMapping, final ApiCallback<TableauAnalyticsextensionsV1ConnectionMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkbookWithConnectionValidateBeforeCall(workbookLuid, xTableauAuth, tableauAnalyticsextensionsV1ConnectionMapping, _callback);
        Type localVarReturnType = new TypeToken<TableauAnalyticsextensionsV1ConnectionMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

/*
API Reference for Tableau Resource Versioned RESTful Endpoints

>The following OpenAPI documentation describes the details of the new Tableau RESTful APIs. A growing number of these are  being released alongside more than 150 [classic REST endpoints](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_ref.htm)  that are currently in wide usage in the Tableau community.    >There are some differences users of the classic endpoints will recognize when viewing these new endpoints. Request bodies for these new REST endpoints must  be formatted using JSON. Endpoint URIs don't contain an API version number. For more information, see  [REST API and Resource Versions](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm).   ![tableau platform](https://github.com/stephenlprice/tableau-rest-openapi/blob/main/assets/images/tableau-platform.png?raw=true)

API version: 2021.2
Contact: stellopricint@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// AnalyticsExtensionsSettingsMethodsApiService AnalyticsExtensionsSettingsMethodsApi service
type AnalyticsExtensionsSettingsMethodsApiService service

type ApiAddAnalyticsExtensionsConnectionRequest struct {
	ctx context.Context
	ApiService *AnalyticsExtensionsSettingsMethodsApiService
	xTableauAuth *string
	tableauAnalyticsextensionsV1ConnectionItem *TableauAnalyticsextensionsV1ConnectionItem
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiAddAnalyticsExtensionsConnectionRequest) XTableauAuth(xTableauAuth string) ApiAddAnalyticsExtensionsConnectionRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiAddAnalyticsExtensionsConnectionRequest) TableauAnalyticsextensionsV1ConnectionItem(tableauAnalyticsextensionsV1ConnectionItem TableauAnalyticsextensionsV1ConnectionItem) ApiAddAnalyticsExtensionsConnectionRequest {
	r.tableauAnalyticsextensionsV1ConnectionItem = &tableauAnalyticsextensionsV1ConnectionItem
	return r
}

func (r ApiAddAnalyticsExtensionsConnectionRequest) Execute() (*TableauAnalyticsextensionsV1ConnectionItem, *http.Response, error) {
	return r.ApiService.AddAnalyticsExtensionsConnectionExecute(r)
}

/*
AddAnalyticsExtensionsConnection Add analytics extension connection to site

Adds a connection to an external service for analytics extensions on this site. Permissions - This method can be called by site and server administrators.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAddAnalyticsExtensionsConnectionRequest
*/
func (a *AnalyticsExtensionsSettingsMethodsApiService) AddAnalyticsExtensionsConnection(ctx context.Context) ApiAddAnalyticsExtensionsConnectionRequest {
	return ApiAddAnalyticsExtensionsConnectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TableauAnalyticsextensionsV1ConnectionItem
func (a *AnalyticsExtensionsSettingsMethodsApiService) AddAnalyticsExtensionsConnectionExecute(r ApiAddAnalyticsExtensionsConnectionRequest) (*TableauAnalyticsextensionsV1ConnectionItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauAnalyticsextensionsV1ConnectionItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsExtensionsSettingsMethodsApiService.AddAnalyticsExtensionsConnection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/site/extensions/analytics/connections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.tableau.analyticsextensions.v1.ConnectionItem+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.analyticsextensions.v1.ConnectionItem+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	// body params
	localVarPostBody = r.tableauAnalyticsextensionsV1ConnectionItem
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v OneOfMultipleConnectionsAttemptedInvalidConnectionHostNameInvalidConnectionPortInvalidConnectionTypeInvalidConnectionUsernameInvalidConnectionPasswordInvalidConnectionSSLSettings
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAnalyticsExtensionsConnectionRequest struct {
	ctx context.Context
	ApiService *AnalyticsExtensionsSettingsMethodsApiService
	connectionLuid string
	xTableauAuth *string
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiDeleteAnalyticsExtensionsConnectionRequest) XTableauAuth(xTableauAuth string) ApiDeleteAnalyticsExtensionsConnectionRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiDeleteAnalyticsExtensionsConnectionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAnalyticsExtensionsConnectionExecute(r)
}

/*
DeleteAnalyticsExtensionsConnection Delete analytics extension connection from site

Deletes a specific analytics extension connection for an external service from a site. Permissions - This method can be called by site and server administrators.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param connectionLuid
 @return ApiDeleteAnalyticsExtensionsConnectionRequest
*/
func (a *AnalyticsExtensionsSettingsMethodsApiService) DeleteAnalyticsExtensionsConnection(ctx context.Context, connectionLuid string) ApiDeleteAnalyticsExtensionsConnectionRequest {
	return ApiDeleteAnalyticsExtensionsConnectionRequest{
		ApiService: a,
		ctx: ctx,
		connectionLuid: connectionLuid,
	}
}

// Execute executes the request
func (a *AnalyticsExtensionsSettingsMethodsApiService) DeleteAnalyticsExtensionsConnectionExecute(r ApiDeleteAnalyticsExtensionsConnectionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsExtensionsSettingsMethodsApiService.DeleteAnalyticsExtensionsConnection")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/site/extensions/analytics/connections/{connection_luid}"
	localVarPath = strings.Replace(localVarPath, "{"+"connection_luid"+"}", url.PathEscape(parameterToString(r.connectionLuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteConnectionFromWorkbookRequest struct {
	ctx context.Context
	ApiService *AnalyticsExtensionsSettingsMethodsApiService
	workbookLuid string
	xTableauAuth *string
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiDeleteConnectionFromWorkbookRequest) XTableauAuth(xTableauAuth string) ApiDeleteConnectionFromWorkbookRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiDeleteConnectionFromWorkbookRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteConnectionFromWorkbookExecute(r)
}

/*
DeleteConnectionFromWorkbook Remove current analytics extension connection for workbook

Remove the currently used analytics extension connection to an external service  from the specified workbook. The connection remains configured, and is available for further usage by the workbook. Permissions - This method can be called by users with authoring access to the workbook.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workbookLuid
 @return ApiDeleteConnectionFromWorkbookRequest
*/
func (a *AnalyticsExtensionsSettingsMethodsApiService) DeleteConnectionFromWorkbook(ctx context.Context, workbookLuid string) ApiDeleteConnectionFromWorkbookRequest {
	return ApiDeleteConnectionFromWorkbookRequest{
		ApiService: a,
		ctx: ctx,
		workbookLuid: workbookLuid,
	}
}

// Execute executes the request
func (a *AnalyticsExtensionsSettingsMethodsApiService) DeleteConnectionFromWorkbookExecute(r ApiDeleteConnectionFromWorkbookRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsExtensionsSettingsMethodsApiService.DeleteConnectionFromWorkbook")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/site/extensions/analytics/workbooks/{workbook_luid}/selected_connection"
	localVarPath = strings.Replace(localVarPath, "{"+"workbook_luid"+"}", url.PathEscape(parameterToString(r.workbookLuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAnalyticsExtensionsConnectionRequest struct {
	ctx context.Context
	ApiService *AnalyticsExtensionsSettingsMethodsApiService
	connectionLuid string
	xTableauAuth *string
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiGetAnalyticsExtensionsConnectionRequest) XTableauAuth(xTableauAuth string) ApiGetAnalyticsExtensionsConnectionRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiGetAnalyticsExtensionsConnectionRequest) Execute() (*TableauAnalyticsextensionsV1ConnectionItem, *http.Response, error) {
	return r.ApiService.GetAnalyticsExtensionsConnectionExecute(r)
}

/*
GetAnalyticsExtensionsConnection Get analytics extension details

Get the details of a specified analytics extension connection to an external service. Permissions - This method can only be called by users with server or site administrator permissions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param connectionLuid
 @return ApiGetAnalyticsExtensionsConnectionRequest
*/
func (a *AnalyticsExtensionsSettingsMethodsApiService) GetAnalyticsExtensionsConnection(ctx context.Context, connectionLuid string) ApiGetAnalyticsExtensionsConnectionRequest {
	return ApiGetAnalyticsExtensionsConnectionRequest{
		ApiService: a,
		ctx: ctx,
		connectionLuid: connectionLuid,
	}
}

// Execute executes the request
//  @return TableauAnalyticsextensionsV1ConnectionItem
func (a *AnalyticsExtensionsSettingsMethodsApiService) GetAnalyticsExtensionsConnectionExecute(r ApiGetAnalyticsExtensionsConnectionRequest) (*TableauAnalyticsextensionsV1ConnectionItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauAnalyticsextensionsV1ConnectionItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsExtensionsSettingsMethodsApiService.GetAnalyticsExtensionsConnection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/site/extensions/analytics/connections/{connection_luid}"
	localVarPath = strings.Replace(localVarPath, "{"+"connection_luid"+"}", url.PathEscape(parameterToString(r.connectionLuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.analyticsextensions.v1.ConnectionItem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAnalyticsExtensionsConnectionsRequest struct {
	ctx context.Context
	ApiService *AnalyticsExtensionsSettingsMethodsApiService
	xTableauAuth *string
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiGetAnalyticsExtensionsConnectionsRequest) XTableauAuth(xTableauAuth string) ApiGetAnalyticsExtensionsConnectionsRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiGetAnalyticsExtensionsConnectionsRequest) Execute() (*TableauAnalyticsextensionsV1ConnectionList, *http.Response, error) {
	return r.ApiService.GetAnalyticsExtensionsConnectionsExecute(r)
}

/*
GetAnalyticsExtensionsConnections List analytics extension connections on site

Lists a site's analytics extension connections for external services. Permissions- This method can be called by site and server administrators.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAnalyticsExtensionsConnectionsRequest
*/
func (a *AnalyticsExtensionsSettingsMethodsApiService) GetAnalyticsExtensionsConnections(ctx context.Context) ApiGetAnalyticsExtensionsConnectionsRequest {
	return ApiGetAnalyticsExtensionsConnectionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TableauAnalyticsextensionsV1ConnectionList
func (a *AnalyticsExtensionsSettingsMethodsApiService) GetAnalyticsExtensionsConnectionsExecute(r ApiGetAnalyticsExtensionsConnectionsRequest) (*TableauAnalyticsextensionsV1ConnectionList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauAnalyticsextensionsV1ConnectionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsExtensionsSettingsMethodsApiService.GetAnalyticsExtensionsConnections")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/site/extensions/analytics/connections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.analyticsextensions.v1.ConnectionList+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v OneOfInvalidConnectionHostNameInvalidConnectionTypeInvalidConnectionPortInvalidConnectionUsernameInvalidConnectionPasswordInvalidConnectionSSLSettings
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAnalyticsExtensionsServerSettingsRequest struct {
	ctx context.Context
	ApiService *AnalyticsExtensionsSettingsMethodsApiService
	xTableauAuth *string
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiGetAnalyticsExtensionsServerSettingsRequest) XTableauAuth(xTableauAuth string) ApiGetAnalyticsExtensionsServerSettingsRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiGetAnalyticsExtensionsServerSettingsRequest) Execute() (*TableauAnalyticsextensionsV1ServerSettings, *http.Response, error) {
	return r.ApiService.GetAnalyticsExtensionsServerSettingsExecute(r)
}

/*
GetAnalyticsExtensionsServerSettings Get enabled state of analytics extensions on server

Gets the enabled/disabled state of analytics extensions on a server. Permissions - This method can only be called by server administrators.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAnalyticsExtensionsServerSettingsRequest
*/
func (a *AnalyticsExtensionsSettingsMethodsApiService) GetAnalyticsExtensionsServerSettings(ctx context.Context) ApiGetAnalyticsExtensionsServerSettingsRequest {
	return ApiGetAnalyticsExtensionsServerSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TableauAnalyticsextensionsV1ServerSettings
func (a *AnalyticsExtensionsSettingsMethodsApiService) GetAnalyticsExtensionsServerSettingsExecute(r ApiGetAnalyticsExtensionsServerSettingsRequest) (*TableauAnalyticsextensionsV1ServerSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauAnalyticsextensionsV1ServerSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsExtensionsSettingsMethodsApiService.GetAnalyticsExtensionsServerSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/server/extensions/analytics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.analyticsextensions.v1.ServerSettings+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAnalyticsExtensionsSiteSettingsRequest struct {
	ctx context.Context
	ApiService *AnalyticsExtensionsSettingsMethodsApiService
	xTableauAuth *string
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiGetAnalyticsExtensionsSiteSettingsRequest) XTableauAuth(xTableauAuth string) ApiGetAnalyticsExtensionsSiteSettingsRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiGetAnalyticsExtensionsSiteSettingsRequest) Execute() (*TableauAnalyticsextensionsV1SiteSettings, *http.Response, error) {
	return r.ApiService.GetAnalyticsExtensionsSiteSettingsExecute(r)
}

/*
GetAnalyticsExtensionsSiteSettings Get enabled state of analytics extensions on site

Gets the enabled/disabled state of analytics extensions on a site. Permissions - This method can be called by site and server administrators.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAnalyticsExtensionsSiteSettingsRequest
*/
func (a *AnalyticsExtensionsSettingsMethodsApiService) GetAnalyticsExtensionsSiteSettings(ctx context.Context) ApiGetAnalyticsExtensionsSiteSettingsRequest {
	return ApiGetAnalyticsExtensionsSiteSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TableauAnalyticsextensionsV1SiteSettings
func (a *AnalyticsExtensionsSettingsMethodsApiService) GetAnalyticsExtensionsSiteSettingsExecute(r ApiGetAnalyticsExtensionsSiteSettingsRequest) (*TableauAnalyticsextensionsV1SiteSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauAnalyticsextensionsV1SiteSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsExtensionsSettingsMethodsApiService.GetAnalyticsExtensionsSiteSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/site/extensions/analytics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.analyticsextensions.v1.SiteSettings+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetConnectionOptionsForWorkbookRequest struct {
	ctx context.Context
	ApiService *AnalyticsExtensionsSettingsMethodsApiService
	workbookLuid string
	xTableauAuth *string
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiGetConnectionOptionsForWorkbookRequest) XTableauAuth(xTableauAuth string) ApiGetConnectionOptionsForWorkbookRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiGetConnectionOptionsForWorkbookRequest) Execute() (*TableauAnalyticsextensionsV1ConnectionMetadataList, *http.Response, error) {
	return r.ApiService.GetConnectionOptionsForWorkbookExecute(r)
}

/*
GetConnectionOptionsForWorkbook List analytics extension connections of workbook

Lists basic details of each analytics extension connection available for a specified workbook, including connection type and name. Permissions - This method can be called by users that have permissions to the specified workbook.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workbookLuid
 @return ApiGetConnectionOptionsForWorkbookRequest
*/
func (a *AnalyticsExtensionsSettingsMethodsApiService) GetConnectionOptionsForWorkbook(ctx context.Context, workbookLuid string) ApiGetConnectionOptionsForWorkbookRequest {
	return ApiGetConnectionOptionsForWorkbookRequest{
		ApiService: a,
		ctx: ctx,
		workbookLuid: workbookLuid,
	}
}

// Execute executes the request
//  @return TableauAnalyticsextensionsV1ConnectionMetadataList
func (a *AnalyticsExtensionsSettingsMethodsApiService) GetConnectionOptionsForWorkbookExecute(r ApiGetConnectionOptionsForWorkbookRequest) (*TableauAnalyticsextensionsV1ConnectionMetadataList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauAnalyticsextensionsV1ConnectionMetadataList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsExtensionsSettingsMethodsApiService.GetConnectionOptionsForWorkbook")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/site/extensions/analytics/workbooks/{workbook_luid}/connections"
	localVarPath = strings.Replace(localVarPath, "{"+"workbook_luid"+"}", url.PathEscape(parameterToString(r.workbookLuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.analyticsextensions.v1.ConnectionMetadataList+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSelectedConnectionForWorkbookRequest struct {
	ctx context.Context
	ApiService *AnalyticsExtensionsSettingsMethodsApiService
	workbookLuid string
	xTableauAuth *string
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiGetSelectedConnectionForWorkbookRequest) XTableauAuth(xTableauAuth string) ApiGetSelectedConnectionForWorkbookRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiGetSelectedConnectionForWorkbookRequest) Execute() (*TableauAnalyticsextensionsV1ConnectionMetadata, *http.Response, error) {
	return r.ApiService.GetSelectedConnectionForWorkbookExecute(r)
}

/*
GetSelectedConnectionForWorkbook Get current analytics extension for workbook

Gets basic details, including connection type and name, of the analytics extension connection to an external service that the specified workbook is currently using. Permissions - This method can be called by users with authoring access to the workbook.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workbookLuid
 @return ApiGetSelectedConnectionForWorkbookRequest
*/
func (a *AnalyticsExtensionsSettingsMethodsApiService) GetSelectedConnectionForWorkbook(ctx context.Context, workbookLuid string) ApiGetSelectedConnectionForWorkbookRequest {
	return ApiGetSelectedConnectionForWorkbookRequest{
		ApiService: a,
		ctx: ctx,
		workbookLuid: workbookLuid,
	}
}

// Execute executes the request
//  @return TableauAnalyticsextensionsV1ConnectionMetadata
func (a *AnalyticsExtensionsSettingsMethodsApiService) GetSelectedConnectionForWorkbookExecute(r ApiGetSelectedConnectionForWorkbookRequest) (*TableauAnalyticsextensionsV1ConnectionMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauAnalyticsextensionsV1ConnectionMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsExtensionsSettingsMethodsApiService.GetSelectedConnectionForWorkbook")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/site/extensions/analytics/workbooks/{workbook_luid}/selected_connection"
	localVarPath = strings.Replace(localVarPath, "{"+"workbook_luid"+"}", url.PathEscape(parameterToString(r.workbookLuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.analyticsextensions.v1.ConnectionMetadata+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAnalyticsExtensionsConnectionRequest struct {
	ctx context.Context
	ApiService *AnalyticsExtensionsSettingsMethodsApiService
	connectionLuid string
	xTableauAuth *string
	tableauAnalyticsextensionsV1ConnectionItem *TableauAnalyticsextensionsV1ConnectionItem
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiUpdateAnalyticsExtensionsConnectionRequest) XTableauAuth(xTableauAuth string) ApiUpdateAnalyticsExtensionsConnectionRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiUpdateAnalyticsExtensionsConnectionRequest) TableauAnalyticsextensionsV1ConnectionItem(tableauAnalyticsextensionsV1ConnectionItem TableauAnalyticsextensionsV1ConnectionItem) ApiUpdateAnalyticsExtensionsConnectionRequest {
	r.tableauAnalyticsextensionsV1ConnectionItem = &tableauAnalyticsextensionsV1ConnectionItem
	return r
}

func (r ApiUpdateAnalyticsExtensionsConnectionRequest) Execute() (*TableauAnalyticsextensionsV1ConnectionItem, *http.Response, error) {
	return r.ApiService.UpdateAnalyticsExtensionsConnectionExecute(r)
}

/*
UpdateAnalyticsExtensionsConnection Update analytics extension connection of site

Updates the details of specified analytics extension connection for an external service to a site. Permissions - This method can be called by site and server administrators.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param connectionLuid
 @return ApiUpdateAnalyticsExtensionsConnectionRequest
*/
func (a *AnalyticsExtensionsSettingsMethodsApiService) UpdateAnalyticsExtensionsConnection(ctx context.Context, connectionLuid string) ApiUpdateAnalyticsExtensionsConnectionRequest {
	return ApiUpdateAnalyticsExtensionsConnectionRequest{
		ApiService: a,
		ctx: ctx,
		connectionLuid: connectionLuid,
	}
}

// Execute executes the request
//  @return TableauAnalyticsextensionsV1ConnectionItem
func (a *AnalyticsExtensionsSettingsMethodsApiService) UpdateAnalyticsExtensionsConnectionExecute(r ApiUpdateAnalyticsExtensionsConnectionRequest) (*TableauAnalyticsextensionsV1ConnectionItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauAnalyticsextensionsV1ConnectionItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsExtensionsSettingsMethodsApiService.UpdateAnalyticsExtensionsConnection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/site/extensions/analytics/connections/{connection_luid}"
	localVarPath = strings.Replace(localVarPath, "{"+"connection_luid"+"}", url.PathEscape(parameterToString(r.connectionLuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.tableau.analyticsextensions.v1.ConnectionItem+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.analyticsextensions.v1.ConnectionItem+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	// body params
	localVarPostBody = r.tableauAnalyticsextensionsV1ConnectionItem
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v OneOfInvalidConnectionHostNameInvalidConnectionPortInvalidConnectionTypeInvalidConnectionUsernameInvalidConnectionPasswordInvalidConnectionSSLSettings
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAnalyticsExtensionsServerSettingsRequest struct {
	ctx context.Context
	ApiService *AnalyticsExtensionsSettingsMethodsApiService
	xTableauAuth *string
	tableauAnalyticsextensionsV1ServerSettings *TableauAnalyticsextensionsV1ServerSettings
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiUpdateAnalyticsExtensionsServerSettingsRequest) XTableauAuth(xTableauAuth string) ApiUpdateAnalyticsExtensionsServerSettingsRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiUpdateAnalyticsExtensionsServerSettingsRequest) TableauAnalyticsextensionsV1ServerSettings(tableauAnalyticsextensionsV1ServerSettings TableauAnalyticsextensionsV1ServerSettings) ApiUpdateAnalyticsExtensionsServerSettingsRequest {
	r.tableauAnalyticsextensionsV1ServerSettings = &tableauAnalyticsextensionsV1ServerSettings
	return r
}

func (r ApiUpdateAnalyticsExtensionsServerSettingsRequest) Execute() (*TableauAnalyticsextensionsV1ServerSettings, *http.Response, error) {
	return r.ApiService.UpdateAnalyticsExtensionsServerSettingsExecute(r)
}

/*
UpdateAnalyticsExtensionsServerSettings Enable/disable analytics extensions on server

Enables or disables analytics extensions on a server. Permissions - This method can only be called by server administrators.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateAnalyticsExtensionsServerSettingsRequest
*/
func (a *AnalyticsExtensionsSettingsMethodsApiService) UpdateAnalyticsExtensionsServerSettings(ctx context.Context) ApiUpdateAnalyticsExtensionsServerSettingsRequest {
	return ApiUpdateAnalyticsExtensionsServerSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TableauAnalyticsextensionsV1ServerSettings
func (a *AnalyticsExtensionsSettingsMethodsApiService) UpdateAnalyticsExtensionsServerSettingsExecute(r ApiUpdateAnalyticsExtensionsServerSettingsRequest) (*TableauAnalyticsextensionsV1ServerSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauAnalyticsextensionsV1ServerSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsExtensionsSettingsMethodsApiService.UpdateAnalyticsExtensionsServerSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/server/extensions/analytics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.tableau.analyticsextensions.v1.ServerSettings+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.analyticsextensions.v1.ServerSettings+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	// body params
	localVarPostBody = r.tableauAnalyticsextensionsV1ServerSettings
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAnalyticsExtensionsSiteSettingsRequest struct {
	ctx context.Context
	ApiService *AnalyticsExtensionsSettingsMethodsApiService
	xTableauAuth *string
	tableauAnalyticsextensionsV1SiteSettings *TableauAnalyticsextensionsV1SiteSettings
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiUpdateAnalyticsExtensionsSiteSettingsRequest) XTableauAuth(xTableauAuth string) ApiUpdateAnalyticsExtensionsSiteSettingsRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiUpdateAnalyticsExtensionsSiteSettingsRequest) TableauAnalyticsextensionsV1SiteSettings(tableauAnalyticsextensionsV1SiteSettings TableauAnalyticsextensionsV1SiteSettings) ApiUpdateAnalyticsExtensionsSiteSettingsRequest {
	r.tableauAnalyticsextensionsV1SiteSettings = &tableauAnalyticsextensionsV1SiteSettings
	return r
}

func (r ApiUpdateAnalyticsExtensionsSiteSettingsRequest) Execute() (*TableauAnalyticsextensionsV1SiteSettings, *http.Response, error) {
	return r.ApiService.UpdateAnalyticsExtensionsSiteSettingsExecute(r)
}

/*
UpdateAnalyticsExtensionsSiteSettings Update enabled state of analytics extensions on site

Enables or disables analytics extensions on a site. Permissions - This method can be called by site and server administrators. Availability - This method is not available for Tableau Online.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateAnalyticsExtensionsSiteSettingsRequest
*/
func (a *AnalyticsExtensionsSettingsMethodsApiService) UpdateAnalyticsExtensionsSiteSettings(ctx context.Context) ApiUpdateAnalyticsExtensionsSiteSettingsRequest {
	return ApiUpdateAnalyticsExtensionsSiteSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TableauAnalyticsextensionsV1SiteSettings
func (a *AnalyticsExtensionsSettingsMethodsApiService) UpdateAnalyticsExtensionsSiteSettingsExecute(r ApiUpdateAnalyticsExtensionsSiteSettingsRequest) (*TableauAnalyticsextensionsV1SiteSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauAnalyticsextensionsV1SiteSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsExtensionsSettingsMethodsApiService.UpdateAnalyticsExtensionsSiteSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/site/extensions/analytics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.tableau.analyticsextensions.v1.SiteSettings+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.analyticsextensions.v1.SiteSettings+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	// body params
	localVarPostBody = r.tableauAnalyticsextensionsV1SiteSettings
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OneOfMissingAuthInvalidAuth
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateWorkbookWithConnectionRequest struct {
	ctx context.Context
	ApiService *AnalyticsExtensionsSettingsMethodsApiService
	workbookLuid string
	xTableauAuth *string
	tableauAnalyticsextensionsV1ConnectionMapping *TableauAnalyticsextensionsV1ConnectionMapping
}

// The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning).
func (r ApiUpdateWorkbookWithConnectionRequest) XTableauAuth(xTableauAuth string) ApiUpdateWorkbookWithConnectionRequest {
	r.xTableauAuth = &xTableauAuth
	return r
}

func (r ApiUpdateWorkbookWithConnectionRequest) TableauAnalyticsextensionsV1ConnectionMapping(tableauAnalyticsextensionsV1ConnectionMapping TableauAnalyticsextensionsV1ConnectionMapping) ApiUpdateWorkbookWithConnectionRequest {
	r.tableauAnalyticsextensionsV1ConnectionMapping = &tableauAnalyticsextensionsV1ConnectionMapping
	return r
}

func (r ApiUpdateWorkbookWithConnectionRequest) Execute() (*TableauAnalyticsextensionsV1ConnectionMapping, *http.Response, error) {
	return r.ApiService.UpdateWorkbookWithConnectionExecute(r)
}

/*
UpdateWorkbookWithConnection Update analytics extension for workbook

Updates the analytics extension connection to external service currently used by a workbook. Permissions - This method can be called by users that have permissions to the specified workbook.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workbookLuid
 @return ApiUpdateWorkbookWithConnectionRequest
*/
func (a *AnalyticsExtensionsSettingsMethodsApiService) UpdateWorkbookWithConnection(ctx context.Context, workbookLuid string) ApiUpdateWorkbookWithConnectionRequest {
	return ApiUpdateWorkbookWithConnectionRequest{
		ApiService: a,
		ctx: ctx,
		workbookLuid: workbookLuid,
	}
}

// Execute executes the request
//  @return TableauAnalyticsextensionsV1ConnectionMapping
func (a *AnalyticsExtensionsSettingsMethodsApiService) UpdateWorkbookWithConnectionExecute(r ApiUpdateWorkbookWithConnectionRequest) (*TableauAnalyticsextensionsV1ConnectionMapping, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableauAnalyticsextensionsV1ConnectionMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsExtensionsSettingsMethodsApiService.UpdateWorkbookWithConnection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/-/settings/site/extensions/analytics/workbooks/{workbook_luid}/selected_connection"
	localVarPath = strings.Replace(localVarPath, "{"+"workbook_luid"+"}", url.PathEscape(parameterToString(r.workbookLuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.tableau.analyticsextensions.v1.ConnectionMapping+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.tableau.analyticsextensions.v1.ConnectionMapping+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTableauAuth != nil {
		localVarHeaderParams["X-Tableau-Auth"] = parameterToString(*r.xTableauAuth, "")
	}
	// body params
	localVarPostBody = r.tableauAnalyticsextensionsV1ConnectionMapping
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Tableau-Auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Tableau-Auth"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

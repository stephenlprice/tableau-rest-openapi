/*
 * API Reference for Tableau Resource Versioned RESTful Endpoints
 * >The following OpenAPI documentation describes the details of the new Tableau RESTful APIs. A growing number of these are  being released alongside more than 150 [classic REST endpoints](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_ref.htm)  that are currently in wide usage in the Tableau community.    >There are some differences users of the classic endpoints will recognize when viewing these new endpoints. Request bodies for these new REST endpoints must  be formatted using JSON. Endpoint URIs don't contain an API version number. For more information, see  [REST API and Resource Versions](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm).   ![tableau platform](https://github.com/stephenlprice/tableau-rest-openapi/blob/main/assets/images/tableau-platform.png?raw=true)
 *
 * The version of the OpenAPI document: 2021.2
 * Contact: stellopricint@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InvalidAuth;
import org.openapitools.client.model.MissingAuth;
import org.openapitools.client.model.OneOfMissingAuthInvalidAuth;
import org.openapitools.client.model.TableauExtensionsDashboardV1BlockListItem;
import org.openapitools.client.model.TableauExtensionsDashboardV1BlockListItems;
import org.openapitools.client.model.TableauExtensionsDashboardV1SafeListItem;
import org.openapitools.client.model.TableauExtensionsDashboardV1SafeListItems;
import org.openapitools.client.model.TableauExtensionsDashboardV1ServerSettings;
import org.openapitools.client.model.TableauExtensionsDashboardV1SiteSettings;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DashboardExtensionsSettingsMethodsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DashboardExtensionsSettingsMethodsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DashboardExtensionsSettingsMethodsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDashboardExtensionsBlockListItem
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1BlockListItem  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDashboardExtensionsBlockListItemCall(String xTableauAuth, TableauExtensionsDashboardV1BlockListItem tableauExtensionsDashboardV1BlockListItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tableauExtensionsDashboardV1BlockListItem;

        // create path and map variables
        String localVarPath = "/api/-/settings/server/extensions/dashboard/blockListItems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.extensions.dashboard.v1.BlockListItem+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.tableau.extensions.dashboard.v1.BlockListItem+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDashboardExtensionsBlockListItemValidateBeforeCall(String xTableauAuth, TableauExtensionsDashboardV1BlockListItem tableauExtensionsDashboardV1BlockListItem, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createDashboardExtensionsBlockListItemCall(xTableauAuth, tableauExtensionsDashboardV1BlockListItem, _callback);
        return localVarCall;

    }

    /**
     * Block dashboard extension on server
     * Adds a dashboard extension to the block list of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1BlockListItem  (optional)
     * @return TableauExtensionsDashboardV1BlockListItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public TableauExtensionsDashboardV1BlockListItem createDashboardExtensionsBlockListItem(String xTableauAuth, TableauExtensionsDashboardV1BlockListItem tableauExtensionsDashboardV1BlockListItem) throws ApiException {
        ApiResponse<TableauExtensionsDashboardV1BlockListItem> localVarResp = createDashboardExtensionsBlockListItemWithHttpInfo(xTableauAuth, tableauExtensionsDashboardV1BlockListItem);
        return localVarResp.getData();
    }

    /**
     * Block dashboard extension on server
     * Adds a dashboard extension to the block list of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1BlockListItem  (optional)
     * @return ApiResponse&lt;TableauExtensionsDashboardV1BlockListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauExtensionsDashboardV1BlockListItem> createDashboardExtensionsBlockListItemWithHttpInfo(String xTableauAuth, TableauExtensionsDashboardV1BlockListItem tableauExtensionsDashboardV1BlockListItem) throws ApiException {
        okhttp3.Call localVarCall = createDashboardExtensionsBlockListItemValidateBeforeCall(xTableauAuth, tableauExtensionsDashboardV1BlockListItem, null);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1BlockListItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Block dashboard extension on server (asynchronously)
     * Adds a dashboard extension to the block list of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1BlockListItem  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDashboardExtensionsBlockListItemAsync(String xTableauAuth, TableauExtensionsDashboardV1BlockListItem tableauExtensionsDashboardV1BlockListItem, final ApiCallback<TableauExtensionsDashboardV1BlockListItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDashboardExtensionsBlockListItemValidateBeforeCall(xTableauAuth, tableauExtensionsDashboardV1BlockListItem, _callback);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1BlockListItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDashboardExtensionsSafeListItem
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1SafeListItem  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDashboardExtensionsSafeListItemCall(String xTableauAuth, TableauExtensionsDashboardV1SafeListItem tableauExtensionsDashboardV1SafeListItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tableauExtensionsDashboardV1SafeListItem;

        // create path and map variables
        String localVarPath = "/api/-/settings/site/extensions/dashboard/safeListItems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.extensions.dashboard.v1.SafeListItem+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.tableau.extensions.dashboard.v1.SafeListItem+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDashboardExtensionsSafeListItemValidateBeforeCall(String xTableauAuth, TableauExtensionsDashboardV1SafeListItem tableauExtensionsDashboardV1SafeListItem, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createDashboardExtensionsSafeListItemCall(xTableauAuth, tableauExtensionsDashboardV1SafeListItem, _callback);
        return localVarCall;

    }

    /**
     * Allow dashboard extension on site
     * Adds a dashboard extension to the safe list the site you are signed into. Permissions - This method can be called by site and server administrators. Availability - Not available for Tableau Online.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1SafeListItem  (optional)
     * @return TableauExtensionsDashboardV1SafeListItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public TableauExtensionsDashboardV1SafeListItem createDashboardExtensionsSafeListItem(String xTableauAuth, TableauExtensionsDashboardV1SafeListItem tableauExtensionsDashboardV1SafeListItem) throws ApiException {
        ApiResponse<TableauExtensionsDashboardV1SafeListItem> localVarResp = createDashboardExtensionsSafeListItemWithHttpInfo(xTableauAuth, tableauExtensionsDashboardV1SafeListItem);
        return localVarResp.getData();
    }

    /**
     * Allow dashboard extension on site
     * Adds a dashboard extension to the safe list the site you are signed into. Permissions - This method can be called by site and server administrators. Availability - Not available for Tableau Online.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1SafeListItem  (optional)
     * @return ApiResponse&lt;TableauExtensionsDashboardV1SafeListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauExtensionsDashboardV1SafeListItem> createDashboardExtensionsSafeListItemWithHttpInfo(String xTableauAuth, TableauExtensionsDashboardV1SafeListItem tableauExtensionsDashboardV1SafeListItem) throws ApiException {
        okhttp3.Call localVarCall = createDashboardExtensionsSafeListItemValidateBeforeCall(xTableauAuth, tableauExtensionsDashboardV1SafeListItem, null);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1SafeListItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Allow dashboard extension on site (asynchronously)
     * Adds a dashboard extension to the safe list the site you are signed into. Permissions - This method can be called by site and server administrators. Availability - Not available for Tableau Online.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1SafeListItem  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDashboardExtensionsSafeListItemAsync(String xTableauAuth, TableauExtensionsDashboardV1SafeListItem tableauExtensionsDashboardV1SafeListItem, final ApiCallback<TableauExtensionsDashboardV1SafeListItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDashboardExtensionsSafeListItemValidateBeforeCall(xTableauAuth, tableauExtensionsDashboardV1SafeListItem, _callback);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1SafeListItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDashboardExtensionsBlockListItem
     * @param blockListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a block list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDashboardExtensionsBlockListItemCall(String blockListItemLuid, String xTableauAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/-/settings/server/extensions/dashboard/blockListItems/{block_list_item_luid}"
            .replaceAll("\\{" + "block_list_item_luid" + "\\}", localVarApiClient.escapeString(blockListItemLuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDashboardExtensionsBlockListItemValidateBeforeCall(String blockListItemLuid, String xTableauAuth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'blockListItemLuid' is set
        if (blockListItemLuid == null) {
            throw new ApiException("Missing the required parameter 'blockListItemLuid' when calling deleteDashboardExtensionsBlockListItem(Async)");
        }
        

        okhttp3.Call localVarCall = deleteDashboardExtensionsBlockListItemCall(blockListItemLuid, xTableauAuth, _callback);
        return localVarCall;

    }

    /**
     * Unblock dashboard extension on server
     * Deletes a specific extension from the block list of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.
     * @param blockListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a block list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDashboardExtensionsBlockListItem(String blockListItemLuid, String xTableauAuth) throws ApiException {
        deleteDashboardExtensionsBlockListItemWithHttpInfo(blockListItemLuid, xTableauAuth);
    }

    /**
     * Unblock dashboard extension on server
     * Deletes a specific extension from the block list of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.
     * @param blockListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a block list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDashboardExtensionsBlockListItemWithHttpInfo(String blockListItemLuid, String xTableauAuth) throws ApiException {
        okhttp3.Call localVarCall = deleteDashboardExtensionsBlockListItemValidateBeforeCall(blockListItemLuid, xTableauAuth, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unblock dashboard extension on server (asynchronously)
     * Deletes a specific extension from the block list of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.
     * @param blockListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a block list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDashboardExtensionsBlockListItemAsync(String blockListItemLuid, String xTableauAuth, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDashboardExtensionsBlockListItemValidateBeforeCall(blockListItemLuid, xTableauAuth, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDashboardExtensionsSafeListItem
     * @param safeListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a safe list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDashboardExtensionsSafeListItemCall(String safeListItemLuid, String xTableauAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/-/settings/site/extensions/dashboard/safeListItems/{safe_list_item_luid}"
            .replaceAll("\\{" + "safe_list_item_luid" + "\\}", localVarApiClient.escapeString(safeListItemLuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDashboardExtensionsSafeListItemValidateBeforeCall(String safeListItemLuid, String xTableauAuth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'safeListItemLuid' is set
        if (safeListItemLuid == null) {
            throw new ApiException("Missing the required parameter 'safeListItemLuid' when calling deleteDashboardExtensionsSafeListItem(Async)");
        }
        

        okhttp3.Call localVarCall = deleteDashboardExtensionsSafeListItemCall(safeListItemLuid, xTableauAuth, _callback);
        return localVarCall;

    }

    /**
     * Disallow dashboard extension on site
     * Deletes a specific dashboard extension from the safe list of the site you are signed into. Permissions - This method can be called by site and server administrators.
     * @param safeListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a safe list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDashboardExtensionsSafeListItem(String safeListItemLuid, String xTableauAuth) throws ApiException {
        deleteDashboardExtensionsSafeListItemWithHttpInfo(safeListItemLuid, xTableauAuth);
    }

    /**
     * Disallow dashboard extension on site
     * Deletes a specific dashboard extension from the safe list of the site you are signed into. Permissions - This method can be called by site and server administrators.
     * @param safeListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a safe list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDashboardExtensionsSafeListItemWithHttpInfo(String safeListItemLuid, String xTableauAuth) throws ApiException {
        okhttp3.Call localVarCall = deleteDashboardExtensionsSafeListItemValidateBeforeCall(safeListItemLuid, xTableauAuth, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disallow dashboard extension on site (asynchronously)
     * Deletes a specific dashboard extension from the safe list of the site you are signed into. Permissions - This method can be called by site and server administrators.
     * @param safeListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a safe list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDashboardExtensionsSafeListItemAsync(String safeListItemLuid, String xTableauAuth, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDashboardExtensionsSafeListItemValidateBeforeCall(safeListItemLuid, xTableauAuth, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDashboardExtensionsBlockListItem
     * @param blockListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a block list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardExtensionsBlockListItemCall(String blockListItemLuid, String xTableauAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/-/settings/server/extensions/dashboard/blockListItems/{block_list_item_luid}"
            .replaceAll("\\{" + "block_list_item_luid" + "\\}", localVarApiClient.escapeString(blockListItemLuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.extensions.dashboard.v1.BlockListItem+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDashboardExtensionsBlockListItemValidateBeforeCall(String blockListItemLuid, String xTableauAuth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'blockListItemLuid' is set
        if (blockListItemLuid == null) {
            throw new ApiException("Missing the required parameter 'blockListItemLuid' when calling getDashboardExtensionsBlockListItem(Async)");
        }
        

        okhttp3.Call localVarCall = getDashboardExtensionsBlockListItemCall(blockListItemLuid, xTableauAuth, _callback);
        return localVarCall;

    }

    /**
     * Get blocked dashboard extension on server
     * Gets the details of a specific dashboard extension on the blocked list of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.
     * @param blockListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return TableauExtensionsDashboardV1BlockListItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a block list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public TableauExtensionsDashboardV1BlockListItem getDashboardExtensionsBlockListItem(String blockListItemLuid, String xTableauAuth) throws ApiException {
        ApiResponse<TableauExtensionsDashboardV1BlockListItem> localVarResp = getDashboardExtensionsBlockListItemWithHttpInfo(blockListItemLuid, xTableauAuth);
        return localVarResp.getData();
    }

    /**
     * Get blocked dashboard extension on server
     * Gets the details of a specific dashboard extension on the blocked list of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.
     * @param blockListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return ApiResponse&lt;TableauExtensionsDashboardV1BlockListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a block list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauExtensionsDashboardV1BlockListItem> getDashboardExtensionsBlockListItemWithHttpInfo(String blockListItemLuid, String xTableauAuth) throws ApiException {
        okhttp3.Call localVarCall = getDashboardExtensionsBlockListItemValidateBeforeCall(blockListItemLuid, xTableauAuth, null);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1BlockListItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get blocked dashboard extension on server (asynchronously)
     * Gets the details of a specific dashboard extension on the blocked list of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.
     * @param blockListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a block list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardExtensionsBlockListItemAsync(String blockListItemLuid, String xTableauAuth, final ApiCallback<TableauExtensionsDashboardV1BlockListItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDashboardExtensionsBlockListItemValidateBeforeCall(blockListItemLuid, xTableauAuth, _callback);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1BlockListItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDashboardExtensionsBlockListItems
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardExtensionsBlockListItemsCall(String xTableauAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/-/settings/server/extensions/dashboard/blockListItems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.extensions.dashboard.v1.BlockListItems+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDashboardExtensionsBlockListItemsValidateBeforeCall(String xTableauAuth, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getDashboardExtensionsBlockListItemsCall(xTableauAuth, _callback);
        return localVarCall;

    }

    /**
     * List blocked dashboard extensions on server
     * Lists the dashboard extensions on the blocked list of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return TableauExtensionsDashboardV1BlockListItems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public TableauExtensionsDashboardV1BlockListItems getDashboardExtensionsBlockListItems(String xTableauAuth) throws ApiException {
        ApiResponse<TableauExtensionsDashboardV1BlockListItems> localVarResp = getDashboardExtensionsBlockListItemsWithHttpInfo(xTableauAuth);
        return localVarResp.getData();
    }

    /**
     * List blocked dashboard extensions on server
     * Lists the dashboard extensions on the blocked list of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return ApiResponse&lt;TableauExtensionsDashboardV1BlockListItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauExtensionsDashboardV1BlockListItems> getDashboardExtensionsBlockListItemsWithHttpInfo(String xTableauAuth) throws ApiException {
        okhttp3.Call localVarCall = getDashboardExtensionsBlockListItemsValidateBeforeCall(xTableauAuth, null);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1BlockListItems>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List blocked dashboard extensions on server (asynchronously)
     * Lists the dashboard extensions on the blocked list of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardExtensionsBlockListItemsAsync(String xTableauAuth, final ApiCallback<TableauExtensionsDashboardV1BlockListItems> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDashboardExtensionsBlockListItemsValidateBeforeCall(xTableauAuth, _callback);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1BlockListItems>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDashboardExtensionsSafeListItem
     * @param safeListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a safe list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardExtensionsSafeListItemCall(String safeListItemLuid, String xTableauAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/-/settings/site/extensions/dashboard/safeListItems/{safe_list_item_luid}"
            .replaceAll("\\{" + "safe_list_item_luid" + "\\}", localVarApiClient.escapeString(safeListItemLuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.extensions.dashboard.v1.SafeListItem+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDashboardExtensionsSafeListItemValidateBeforeCall(String safeListItemLuid, String xTableauAuth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'safeListItemLuid' is set
        if (safeListItemLuid == null) {
            throw new ApiException("Missing the required parameter 'safeListItemLuid' when calling getDashboardExtensionsSafeListItem(Async)");
        }
        

        okhttp3.Call localVarCall = getDashboardExtensionsSafeListItemCall(safeListItemLuid, xTableauAuth, _callback);
        return localVarCall;

    }

    /**
     * Get allowed dashboard extension on site
     * Gets the details of a specific dashboard extension on the safe list of the site you are signed into. Permissions - This method can be called by site and server administrators.
     * @param safeListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return TableauExtensionsDashboardV1SafeListItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a safe list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public TableauExtensionsDashboardV1SafeListItem getDashboardExtensionsSafeListItem(String safeListItemLuid, String xTableauAuth) throws ApiException {
        ApiResponse<TableauExtensionsDashboardV1SafeListItem> localVarResp = getDashboardExtensionsSafeListItemWithHttpInfo(safeListItemLuid, xTableauAuth);
        return localVarResp.getData();
    }

    /**
     * Get allowed dashboard extension on site
     * Gets the details of a specific dashboard extension on the safe list of the site you are signed into. Permissions - This method can be called by site and server administrators.
     * @param safeListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return ApiResponse&lt;TableauExtensionsDashboardV1SafeListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a safe list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauExtensionsDashboardV1SafeListItem> getDashboardExtensionsSafeListItemWithHttpInfo(String safeListItemLuid, String xTableauAuth) throws ApiException {
        okhttp3.Call localVarCall = getDashboardExtensionsSafeListItemValidateBeforeCall(safeListItemLuid, xTableauAuth, null);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1SafeListItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get allowed dashboard extension on site (asynchronously)
     * Gets the details of a specific dashboard extension on the safe list of the site you are signed into. Permissions - This method can be called by site and server administrators.
     * @param safeListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a safe list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardExtensionsSafeListItemAsync(String safeListItemLuid, String xTableauAuth, final ApiCallback<TableauExtensionsDashboardV1SafeListItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDashboardExtensionsSafeListItemValidateBeforeCall(safeListItemLuid, xTableauAuth, _callback);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1SafeListItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDashboardExtensionsSafeListItems
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardExtensionsSafeListItemsCall(String xTableauAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/-/settings/site/extensions/dashboard/safeListItems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.extensions.dashboard.v1.SafeListItems+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDashboardExtensionsSafeListItemsValidateBeforeCall(String xTableauAuth, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getDashboardExtensionsSafeListItemsCall(xTableauAuth, _callback);
        return localVarCall;

    }

    /**
     * Lists allowed dashboard extensions on site
     * Lists the dashboard extensions on the safe list of the site you are signed into. Permissions - This method can be called by site and server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return TableauExtensionsDashboardV1SafeListItems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public TableauExtensionsDashboardV1SafeListItems getDashboardExtensionsSafeListItems(String xTableauAuth) throws ApiException {
        ApiResponse<TableauExtensionsDashboardV1SafeListItems> localVarResp = getDashboardExtensionsSafeListItemsWithHttpInfo(xTableauAuth);
        return localVarResp.getData();
    }

    /**
     * Lists allowed dashboard extensions on site
     * Lists the dashboard extensions on the safe list of the site you are signed into. Permissions - This method can be called by site and server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return ApiResponse&lt;TableauExtensionsDashboardV1SafeListItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauExtensionsDashboardV1SafeListItems> getDashboardExtensionsSafeListItemsWithHttpInfo(String xTableauAuth) throws ApiException {
        okhttp3.Call localVarCall = getDashboardExtensionsSafeListItemsValidateBeforeCall(xTableauAuth, null);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1SafeListItems>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists allowed dashboard extensions on site (asynchronously)
     * Lists the dashboard extensions on the safe list of the site you are signed into. Permissions - This method can be called by site and server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardExtensionsSafeListItemsAsync(String xTableauAuth, final ApiCallback<TableauExtensionsDashboardV1SafeListItems> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDashboardExtensionsSafeListItemsValidateBeforeCall(xTableauAuth, _callback);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1SafeListItems>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDashboardExtensionsServerSettings
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server  permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardExtensionsServerSettingsCall(String xTableauAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/-/settings/server/extensions/dashboard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.extensions.dashboard.v1.ServerSettings+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDashboardExtensionsServerSettingsValidateBeforeCall(String xTableauAuth, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getDashboardExtensionsServerSettingsCall(xTableauAuth, _callback);
        return localVarCall;

    }

    /**
     * List dashboard extension settings of server
     * Lists the dashboard extension settings of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return TableauExtensionsDashboardV1ServerSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server  permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public TableauExtensionsDashboardV1ServerSettings getDashboardExtensionsServerSettings(String xTableauAuth) throws ApiException {
        ApiResponse<TableauExtensionsDashboardV1ServerSettings> localVarResp = getDashboardExtensionsServerSettingsWithHttpInfo(xTableauAuth);
        return localVarResp.getData();
    }

    /**
     * List dashboard extension settings of server
     * Lists the dashboard extension settings of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return ApiResponse&lt;TableauExtensionsDashboardV1ServerSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server  permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauExtensionsDashboardV1ServerSettings> getDashboardExtensionsServerSettingsWithHttpInfo(String xTableauAuth) throws ApiException {
        okhttp3.Call localVarCall = getDashboardExtensionsServerSettingsValidateBeforeCall(xTableauAuth, null);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1ServerSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List dashboard extension settings of server (asynchronously)
     * Lists the dashboard extension settings of a server. Permissions - This method can only be called by server administrators. Availability - Not available for Tableau Online.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server  permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardExtensionsServerSettingsAsync(String xTableauAuth, final ApiCallback<TableauExtensionsDashboardV1ServerSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDashboardExtensionsServerSettingsValidateBeforeCall(xTableauAuth, _callback);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1ServerSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDashboardExtensionsSiteSettings
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardExtensionsSiteSettingsCall(String xTableauAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/-/settings/site/extensions/dashboard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.extensions.dashboard.v1.SiteSettings+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDashboardExtensionsSiteSettingsValidateBeforeCall(String xTableauAuth, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getDashboardExtensionsSiteSettingsCall(xTableauAuth, _callback);
        return localVarCall;

    }

    /**
     * List dashboard extension settings of site
     * Lists the dashboard extension settings of the site you are signed into. Permissions - This method can be called by site and server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return TableauExtensionsDashboardV1SiteSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public TableauExtensionsDashboardV1SiteSettings getDashboardExtensionsSiteSettings(String xTableauAuth) throws ApiException {
        ApiResponse<TableauExtensionsDashboardV1SiteSettings> localVarResp = getDashboardExtensionsSiteSettingsWithHttpInfo(xTableauAuth);
        return localVarResp.getData();
    }

    /**
     * List dashboard extension settings of site
     * Lists the dashboard extension settings of the site you are signed into. Permissions - This method can be called by site and server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @return ApiResponse&lt;TableauExtensionsDashboardV1SiteSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauExtensionsDashboardV1SiteSettings> getDashboardExtensionsSiteSettingsWithHttpInfo(String xTableauAuth) throws ApiException {
        okhttp3.Call localVarCall = getDashboardExtensionsSiteSettingsValidateBeforeCall(xTableauAuth, null);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1SiteSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List dashboard extension settings of site (asynchronously)
     * Lists the dashboard extension settings of the site you are signed into. Permissions - This method can be called by site and server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardExtensionsSiteSettingsAsync(String xTableauAuth, final ApiCallback<TableauExtensionsDashboardV1SiteSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDashboardExtensionsSiteSettingsValidateBeforeCall(xTableauAuth, _callback);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1SiteSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDashboardExtensionsSafeListItem
     * @param safeListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1SafeListItem  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a safe list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDashboardExtensionsSafeListItemCall(Object safeListItemLuid, String xTableauAuth, TableauExtensionsDashboardV1SafeListItem tableauExtensionsDashboardV1SafeListItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tableauExtensionsDashboardV1SafeListItem;

        // create path and map variables
        String localVarPath = "/api/-/settings/site/extensions/dashboard/safeListItems/{safe_list_item_luid}"
            .replaceAll("\\{" + "safe_list_item_luid" + "\\}", localVarApiClient.escapeString(safeListItemLuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.extensions.dashboard.v1.SafeListItem+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.tableau.extensions.dashboard.v1.SafeListItem+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDashboardExtensionsSafeListItemValidateBeforeCall(Object safeListItemLuid, String xTableauAuth, TableauExtensionsDashboardV1SafeListItem tableauExtensionsDashboardV1SafeListItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'safeListItemLuid' is set
        if (safeListItemLuid == null) {
            throw new ApiException("Missing the required parameter 'safeListItemLuid' when calling updateDashboardExtensionsSafeListItem(Async)");
        }
        

        okhttp3.Call localVarCall = updateDashboardExtensionsSafeListItemCall(safeListItemLuid, xTableauAuth, tableauExtensionsDashboardV1SafeListItem, _callback);
        return localVarCall;

    }

    /**
     * Update settings for allowed dashboard extension on site
     * Updates the settings of a specific dashboard extension in the safe list of the site you are signed into. Permissions - This method can be called by site and server administrators.
     * @param safeListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1SafeListItem  (optional)
     * @return TableauExtensionsDashboardV1SafeListItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a safe list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public TableauExtensionsDashboardV1SafeListItem updateDashboardExtensionsSafeListItem(Object safeListItemLuid, String xTableauAuth, TableauExtensionsDashboardV1SafeListItem tableauExtensionsDashboardV1SafeListItem) throws ApiException {
        ApiResponse<TableauExtensionsDashboardV1SafeListItem> localVarResp = updateDashboardExtensionsSafeListItemWithHttpInfo(safeListItemLuid, xTableauAuth, tableauExtensionsDashboardV1SafeListItem);
        return localVarResp.getData();
    }

    /**
     * Update settings for allowed dashboard extension on site
     * Updates the settings of a specific dashboard extension in the safe list of the site you are signed into. Permissions - This method can be called by site and server administrators.
     * @param safeListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1SafeListItem  (optional)
     * @return ApiResponse&lt;TableauExtensionsDashboardV1SafeListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a safe list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauExtensionsDashboardV1SafeListItem> updateDashboardExtensionsSafeListItemWithHttpInfo(Object safeListItemLuid, String xTableauAuth, TableauExtensionsDashboardV1SafeListItem tableauExtensionsDashboardV1SafeListItem) throws ApiException {
        okhttp3.Call localVarCall = updateDashboardExtensionsSafeListItemValidateBeforeCall(safeListItemLuid, xTableauAuth, tableauExtensionsDashboardV1SafeListItem, null);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1SafeListItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update settings for allowed dashboard extension on site (asynchronously)
     * Updates the settings of a specific dashboard extension in the safe list of the site you are signed into. Permissions - This method can be called by site and server administrators.
     * @param safeListItemLuid  (required)
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1SafeListItem  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to find a safe list item with given LUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDashboardExtensionsSafeListItemAsync(Object safeListItemLuid, String xTableauAuth, TableauExtensionsDashboardV1SafeListItem tableauExtensionsDashboardV1SafeListItem, final ApiCallback<TableauExtensionsDashboardV1SafeListItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDashboardExtensionsSafeListItemValidateBeforeCall(safeListItemLuid, xTableauAuth, tableauExtensionsDashboardV1SafeListItem, _callback);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1SafeListItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDashboardExtensionsServerSettings
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1ServerSettings  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server  permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDashboardExtensionsServerSettingsCall(String xTableauAuth, TableauExtensionsDashboardV1ServerSettings tableauExtensionsDashboardV1ServerSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tableauExtensionsDashboardV1ServerSettings;

        // create path and map variables
        String localVarPath = "/api/-/settings/server/extensions/dashboard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.extensions.dashboard.v1.ServerSettings+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.tableau.extensions.dashboard.v1.ServerSettings+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDashboardExtensionsServerSettingsValidateBeforeCall(String xTableauAuth, TableauExtensionsDashboardV1ServerSettings tableauExtensionsDashboardV1ServerSettings, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = updateDashboardExtensionsServerSettingsCall(xTableauAuth, tableauExtensionsDashboardV1ServerSettings, _callback);
        return localVarCall;

    }

    /**
     * Update dashboard extensions settings of server
     * Updates the settings for dashboard extensions of a server. Permissions - This method can only be called by server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1ServerSettings  (optional)
     * @return TableauExtensionsDashboardV1ServerSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server  permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public TableauExtensionsDashboardV1ServerSettings updateDashboardExtensionsServerSettings(String xTableauAuth, TableauExtensionsDashboardV1ServerSettings tableauExtensionsDashboardV1ServerSettings) throws ApiException {
        ApiResponse<TableauExtensionsDashboardV1ServerSettings> localVarResp = updateDashboardExtensionsServerSettingsWithHttpInfo(xTableauAuth, tableauExtensionsDashboardV1ServerSettings);
        return localVarResp.getData();
    }

    /**
     * Update dashboard extensions settings of server
     * Updates the settings for dashboard extensions of a server. Permissions - This method can only be called by server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1ServerSettings  (optional)
     * @return ApiResponse&lt;TableauExtensionsDashboardV1ServerSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server  permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauExtensionsDashboardV1ServerSettings> updateDashboardExtensionsServerSettingsWithHttpInfo(String xTableauAuth, TableauExtensionsDashboardV1ServerSettings tableauExtensionsDashboardV1ServerSettings) throws ApiException {
        okhttp3.Call localVarCall = updateDashboardExtensionsServerSettingsValidateBeforeCall(xTableauAuth, tableauExtensionsDashboardV1ServerSettings, null);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1ServerSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update dashboard extensions settings of server (asynchronously)
     * Updates the settings for dashboard extensions of a server. Permissions - This method can only be called by server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1ServerSettings  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server  permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDashboardExtensionsServerSettingsAsync(String xTableauAuth, TableauExtensionsDashboardV1ServerSettings tableauExtensionsDashboardV1ServerSettings, final ApiCallback<TableauExtensionsDashboardV1ServerSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDashboardExtensionsServerSettingsValidateBeforeCall(xTableauAuth, tableauExtensionsDashboardV1ServerSettings, _callback);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1ServerSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDashboardExtensionsSiteSettings
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1SiteSettings  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDashboardExtensionsSiteSettingsCall(String xTableauAuth, TableauExtensionsDashboardV1SiteSettings tableauExtensionsDashboardV1SiteSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tableauExtensionsDashboardV1SiteSettings;

        // create path and map variables
        String localVarPath = "/api/-/settings/site/extensions/dashboard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTableauAuth != null) {
            localVarHeaderParams.put("X-Tableau-Auth", localVarApiClient.parameterToString(xTableauAuth));
        }

        final String[] localVarAccepts = {
            "application/vnd.tableau.extensions.dashboard.v1.SiteSettings+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.tableau.extensions.dashboard.v1.SiteSettings+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Tableau-Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDashboardExtensionsSiteSettingsValidateBeforeCall(String xTableauAuth, TableauExtensionsDashboardV1SiteSettings tableauExtensionsDashboardV1SiteSettings, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = updateDashboardExtensionsSiteSettingsCall(xTableauAuth, tableauExtensionsDashboardV1SiteSettings, _callback);
        return localVarCall;

    }

    /**
     * Update dashboard extension settings of site
     * Updates the settings for dashboard extensions for the site you are signed into. Permissions - This method can be called by site and server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1SiteSettings  (optional)
     * @return TableauExtensionsDashboardV1SiteSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public TableauExtensionsDashboardV1SiteSettings updateDashboardExtensionsSiteSettings(String xTableauAuth, TableauExtensionsDashboardV1SiteSettings tableauExtensionsDashboardV1SiteSettings) throws ApiException {
        ApiResponse<TableauExtensionsDashboardV1SiteSettings> localVarResp = updateDashboardExtensionsSiteSettingsWithHttpInfo(xTableauAuth, tableauExtensionsDashboardV1SiteSettings);
        return localVarResp.getData();
    }

    /**
     * Update dashboard extension settings of site
     * Updates the settings for dashboard extensions for the site you are signed into. Permissions - This method can be called by site and server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1SiteSettings  (optional)
     * @return ApiResponse&lt;TableauExtensionsDashboardV1SiteSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableauExtensionsDashboardV1SiteSettings> updateDashboardExtensionsSiteSettingsWithHttpInfo(String xTableauAuth, TableauExtensionsDashboardV1SiteSettings tableauExtensionsDashboardV1SiteSettings) throws ApiException {
        okhttp3.Call localVarCall = updateDashboardExtensionsSiteSettingsValidateBeforeCall(xTableauAuth, tableauExtensionsDashboardV1SiteSettings, null);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1SiteSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update dashboard extension settings of site (asynchronously)
     * Updates the settings for dashboard extensions for the site you are signed into. Permissions - This method can be called by site and server administrators.
     * @param xTableauAuth The Tableau authentication header. The value is a credentials token from a Tableau server&#39;s response to an authentication request.    The Content-Type and Accept headers should be the mediatype of the request and response except in cases where you want to  [explicitly allow other versions of the resource](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm#per_resource_versioning). (optional)
     * @param tableauExtensionsDashboardV1SiteSettings  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User could not be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Server or site administrator permissions are required for this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDashboardExtensionsSiteSettingsAsync(String xTableauAuth, TableauExtensionsDashboardV1SiteSettings tableauExtensionsDashboardV1SiteSettings, final ApiCallback<TableauExtensionsDashboardV1SiteSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDashboardExtensionsSiteSettingsValidateBeforeCall(xTableauAuth, tableauExtensionsDashboardV1SiteSettings, _callback);
        Type localVarReturnType = new TypeToken<TableauExtensionsDashboardV1SiteSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

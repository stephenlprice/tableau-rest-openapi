/*
API Reference for Tableau Resource Versioned RESTful Endpoints

>The following OpenAPI documentation describes the details of the new Tableau RESTful APIs. A growing number of these are  being released alongside more than 150 [classic REST endpoints](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_ref.htm)  that are currently in wide usage in the Tableau community.    >There are some differences users of the classic endpoints will recognize when viewing these new endpoints. Request bodies for these new REST endpoints must  be formatted using JSON. Endpoint URIs don't contain an API version number. For more information, see  [REST API and Resource Versions](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm).   ![tableau platform](https://github.com/stephenlprice/tableau-rest-openapi/blob/main/assets/images/tableau-platform.png?raw=true)

API version: 2021.2
Contact: stellopricint@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TableauExtensionsDashboardV1ServerSettings Extension settings of a Tableau server.
type TableauExtensionsDashboardV1ServerSettings struct {
	BlockListItems []TableauExtensionsDashboardV1BlockListItem `json:"block_list_items,omitempty"`
	// Specifies whether sandboxed extensions are allowed to run on the site.
	ExtensionsEnabled *bool `json:"extensions_enabled,omitempty"`
}

// NewTableauExtensionsDashboardV1ServerSettings instantiates a new TableauExtensionsDashboardV1ServerSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableauExtensionsDashboardV1ServerSettings() *TableauExtensionsDashboardV1ServerSettings {
	this := TableauExtensionsDashboardV1ServerSettings{}
	return &this
}

// NewTableauExtensionsDashboardV1ServerSettingsWithDefaults instantiates a new TableauExtensionsDashboardV1ServerSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableauExtensionsDashboardV1ServerSettingsWithDefaults() *TableauExtensionsDashboardV1ServerSettings {
	this := TableauExtensionsDashboardV1ServerSettings{}
	return &this
}

// GetBlockListItems returns the BlockListItems field value if set, zero value otherwise.
func (o *TableauExtensionsDashboardV1ServerSettings) GetBlockListItems() []TableauExtensionsDashboardV1BlockListItem {
	if o == nil || o.BlockListItems == nil {
		var ret []TableauExtensionsDashboardV1BlockListItem
		return ret
	}
	return o.BlockListItems
}

// GetBlockListItemsOk returns a tuple with the BlockListItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableauExtensionsDashboardV1ServerSettings) GetBlockListItemsOk() ([]TableauExtensionsDashboardV1BlockListItem, bool) {
	if o == nil || o.BlockListItems == nil {
		return nil, false
	}
	return o.BlockListItems, true
}

// HasBlockListItems returns a boolean if a field has been set.
func (o *TableauExtensionsDashboardV1ServerSettings) HasBlockListItems() bool {
	if o != nil && o.BlockListItems != nil {
		return true
	}

	return false
}

// SetBlockListItems gets a reference to the given []TableauExtensionsDashboardV1BlockListItem and assigns it to the BlockListItems field.
func (o *TableauExtensionsDashboardV1ServerSettings) SetBlockListItems(v []TableauExtensionsDashboardV1BlockListItem) {
	o.BlockListItems = v
}

// GetExtensionsEnabled returns the ExtensionsEnabled field value if set, zero value otherwise.
func (o *TableauExtensionsDashboardV1ServerSettings) GetExtensionsEnabled() bool {
	if o == nil || o.ExtensionsEnabled == nil {
		var ret bool
		return ret
	}
	return *o.ExtensionsEnabled
}

// GetExtensionsEnabledOk returns a tuple with the ExtensionsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableauExtensionsDashboardV1ServerSettings) GetExtensionsEnabledOk() (*bool, bool) {
	if o == nil || o.ExtensionsEnabled == nil {
		return nil, false
	}
	return o.ExtensionsEnabled, true
}

// HasExtensionsEnabled returns a boolean if a field has been set.
func (o *TableauExtensionsDashboardV1ServerSettings) HasExtensionsEnabled() bool {
	if o != nil && o.ExtensionsEnabled != nil {
		return true
	}

	return false
}

// SetExtensionsEnabled gets a reference to the given bool and assigns it to the ExtensionsEnabled field.
func (o *TableauExtensionsDashboardV1ServerSettings) SetExtensionsEnabled(v bool) {
	o.ExtensionsEnabled = &v
}

func (o TableauExtensionsDashboardV1ServerSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BlockListItems != nil {
		toSerialize["block_list_items"] = o.BlockListItems
	}
	if o.ExtensionsEnabled != nil {
		toSerialize["extensions_enabled"] = o.ExtensionsEnabled
	}
	return json.Marshal(toSerialize)
}

type NullableTableauExtensionsDashboardV1ServerSettings struct {
	value *TableauExtensionsDashboardV1ServerSettings
	isSet bool
}

func (v NullableTableauExtensionsDashboardV1ServerSettings) Get() *TableauExtensionsDashboardV1ServerSettings {
	return v.value
}

func (v *NullableTableauExtensionsDashboardV1ServerSettings) Set(val *TableauExtensionsDashboardV1ServerSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableTableauExtensionsDashboardV1ServerSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableTableauExtensionsDashboardV1ServerSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableauExtensionsDashboardV1ServerSettings(val *TableauExtensionsDashboardV1ServerSettings) *NullableTableauExtensionsDashboardV1ServerSettings {
	return &NullableTableauExtensionsDashboardV1ServerSettings{value: val, isSet: true}
}

func (v NullableTableauExtensionsDashboardV1ServerSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableauExtensionsDashboardV1ServerSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



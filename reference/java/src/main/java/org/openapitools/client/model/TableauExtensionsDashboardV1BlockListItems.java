/*
 * API Reference for Tableau Resource Versioned RESTful Endpoints
 * >The following OpenAPI documentation describes the details of the new Tableau RESTful APIs. A growing number of these are  being released alongside more than 150 [classic REST endpoints](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_ref.htm)  that are currently in wide usage in the Tableau community.    >There are some differences users of the classic endpoints will recognize when viewing these new endpoints. Request bodies for these new REST endpoints must  be formatted using JSON. Endpoint URIs don't contain an API version number. For more information, see  [REST API and Resource Versions](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm).   ![tableau platform](https://github.com/stephenlprice/tableau-rest-openapi/blob/main/assets/images/tableau-platform.png?raw=true)
 *
 * The version of the OpenAPI document: 2021.2
 * Contact: stellopricint@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.TableauExtensionsDashboardV1BlockListItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List of dashboard extensions blocked from running on a server.
 */
@ApiModel(description = "List of dashboard extensions blocked from running on a server.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-11T22:38:27.103297Z[Etc/UTC]")
public class TableauExtensionsDashboardV1BlockListItems {
  public static final String SERIALIZED_NAME_BLOCK_LIST_ITEMS = "block_list_items";
  @SerializedName(SERIALIZED_NAME_BLOCK_LIST_ITEMS)
  private List<TableauExtensionsDashboardV1BlockListItem> blockListItems = null;

  public TableauExtensionsDashboardV1BlockListItems() { 
  }

  public TableauExtensionsDashboardV1BlockListItems blockListItems(List<TableauExtensionsDashboardV1BlockListItem> blockListItems) {
    
    this.blockListItems = blockListItems;
    return this;
  }

  public TableauExtensionsDashboardV1BlockListItems addBlockListItemsItem(TableauExtensionsDashboardV1BlockListItem blockListItemsItem) {
    if (this.blockListItems == null) {
      this.blockListItems = new ArrayList<>();
    }
    this.blockListItems.add(blockListItemsItem);
    return this;
  }

   /**
   * Get blockListItems
   * @return blockListItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<TableauExtensionsDashboardV1BlockListItem> getBlockListItems() {
    return blockListItems;
  }


  public void setBlockListItems(List<TableauExtensionsDashboardV1BlockListItem> blockListItems) {
    this.blockListItems = blockListItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableauExtensionsDashboardV1BlockListItems tableauExtensionsDashboardV1BlockListItems = (TableauExtensionsDashboardV1BlockListItems) o;
    return Objects.equals(this.blockListItems, tableauExtensionsDashboardV1BlockListItems.blockListItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockListItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableauExtensionsDashboardV1BlockListItems {\n");
    sb.append("    blockListItems: ").append(toIndentedString(blockListItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("block_list_items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TableauExtensionsDashboardV1BlockListItems
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TableauExtensionsDashboardV1BlockListItems.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableauExtensionsDashboardV1BlockListItems is not found in the empty JSON string", TableauExtensionsDashboardV1BlockListItems.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TableauExtensionsDashboardV1BlockListItems.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableauExtensionsDashboardV1BlockListItems` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArrayblockListItems = jsonObj.getAsJsonArray("block_list_items");
      if (jsonArrayblockListItems != null) {
        // ensure the json data is an array
        if (!jsonObj.get("block_list_items").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `block_list_items` to be an array in the JSON string but got `%s`", jsonObj.get("block_list_items").toString()));
        }

        // validate the optional field `block_list_items` (array)
        for (int i = 0; i < jsonArrayblockListItems.size(); i++) {
          TableauExtensionsDashboardV1BlockListItem.validateJsonObject(jsonArrayblockListItems.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableauExtensionsDashboardV1BlockListItems.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableauExtensionsDashboardV1BlockListItems' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableauExtensionsDashboardV1BlockListItems> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableauExtensionsDashboardV1BlockListItems.class));

       return (TypeAdapter<T>) new TypeAdapter<TableauExtensionsDashboardV1BlockListItems>() {
           @Override
           public void write(JsonWriter out, TableauExtensionsDashboardV1BlockListItems value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableauExtensionsDashboardV1BlockListItems read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TableauExtensionsDashboardV1BlockListItems given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TableauExtensionsDashboardV1BlockListItems
  * @throws IOException if the JSON string is invalid with respect to TableauExtensionsDashboardV1BlockListItems
  */
  public static TableauExtensionsDashboardV1BlockListItems fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableauExtensionsDashboardV1BlockListItems.class);
  }

 /**
  * Convert an instance of TableauExtensionsDashboardV1BlockListItems to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

